{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "289b00bc-c809-11ed-beef-40b076444a23",
    "deck_config_uuid": "0cc67172-a529-11ec-b44f-acde48001122",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": false,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "0cc67172-a529-11ec-b44f-acde48001122",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Computer Science",
            "new": {
                "bury": true,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 0,
                "perDay": 10,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 80
            },
            "reviewOrder": 0,
            "timer": 1
        }
    ],
    "desc": "<h1>Computer Scicence</h1>\n\nNuv√¶rende tags:\n<ul>\n        <li>CS::API</li>\n        <li>CS::Software-Engineering</li>\n        <li>CS::Generic-Programming</li>\n</ul>\n",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "newLimit": null,
    "newLimitToday": null,
    "reviewLimit": null,
    "reviewLimitToday": null,
    "media_files": [],
    "name": "Computer Science",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.tag {\n  color: white;\n  background-color: #9F2BFF;\n  font-size: 11px;\n  font-weight: bold;\n  padding: 4px;\n  border-radius: 10px;\n  vertical-align: middle;\n}\n\npre {\n  font-family: monospace;\n  font-size: 12px;\n  text-align: left;\n  color: black;\n  background-color: #F0F0F0;\n  border: 1px solid #CCC;\n}\n\n",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Computer Science Basic",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n\n<hr id=answer>\n\n{{Back}}\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Front",
                    "ord": 0,
                    "qfmt": "{{Front}}\n<br /> <br />\n<sub class=\"tag\">{{ Tags }}</sub>",
                    "scratchPad": 0
                }
            ],
            "type": 0,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.tag {\n  color: white;\n  background-color: #9F2BFF;\n  font-size: 11px;\n  font-weight: bold;\n  padding: 4px;\n  border-radius: 10px;\n  vertical-align: middle;\n}\n\n",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Text",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Extra",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Computer Science Cloze",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}\n\n<br>\n\n{{Extra}}\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}\n<br /> <br />\n<sub class=\"tag\">{{ Tags }}</sub>",
                    "scratchPad": 0
                }
            ],
            "type": 1,
            "vers": []
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the type of error, when the response code is `4xx` in an API?",
                "Client error. The client application behaved erroneously."
            ],
            "flags": 0,
            "guid": "zQovk_!rX=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::API",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the type of error, when the response code is `5xx` in an API?",
                "Server error. The API behaved erroneously"
            ],
            "flags": 0,
            "guid": "xK&pf_ZVfI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::API",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the type of response, when the response code is `2xx` in an API?",
                "Success, client and API worked"
            ],
            "flags": 0,
            "guid": "GU0i#M@-]5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::API",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the time complexity for accessing an element at an index in an array?",
                "O(1). Constant time."
            ],
            "flags": 0,
            "guid": "cC#]I>;r%",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::data-structures",
                "CS::arrays"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the time complexity for deleting an element at an index in an array?",
                "O(n). It has to traverse the list when shifting the elements back. This also only works on dynamic arrays."
            ],
            "flags": 0,
            "guid": "c%WsZMA0!c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::data-structures",
                "CS::arrays"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the time complexity of updating an element at an index in an array?",
                "O(1). Constant time."
            ],
            "flags": 0,
            "guid": "xI&NF/khzM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::data-structures",
                "CS::arrays"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the time complexity of traversing an array?",
                "O(n). "
            ],
            "flags": 0,
            "guid": "v?~/&p?>Z$",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::data-structures",
                "CS::arrays"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the time complexity for inserting in a dynamic array?",
                "O(n). It has to traverse the array when moving the objects."
            ],
            "flags": 0,
            "guid": "8eFo)L&~J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::data-structures",
                "CS::arrays"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean for science to be based on the facts?",
                "When it is claimed that science is based on the facts, it means that the scientific knowledge is presumed to be claims about the world that can be directly established by a careful, unprejudiced use of the senses."
            ],
            "flags": 0,
            "guid": "w5wV?Pi+`L",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the objective basis for science?",
                "The objective basis for science is the facts established by a careful and unprejudiced observation of the world."
            ],
            "flags": 0,
            "guid": "t*1&`/E+R}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who is credited with causing the break with tradition in reagrds to observations and experiments?",
                "Galileo is credited with causing the break with tradition in regards to observations and experiments, not solely based on what observations and experiments he mad,e but primarily because of his attitude towards them."
            ],
            "flags": 0,
            "guid": "KiMyH_mNQJ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was Galileo‚Äôs view on scientific knowledge?",
                "Galileo believed that scientific knowledge should be based on established facts obtained through observation and experimentation"
            ],
            "flags": 0,
            "guid": "k[jgIy{Mp>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the historical shift that occurred during the early 17th century in science?",
                "During the early 17th century there was a shift towards taking observable facts seriously as the basis for scientific knowledge, rather than relying on the authority such as the Bibly or the philosopher Aristotle."
            ],
            "flags": 0,
            "guid": "Mx[{A;h5=z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What did Galileo challenge regarding falling bodies?",
                "The notation that the speed of falling bodies was regulated by their respective weights."
            ],
            "flags": 0,
            "guid": "n;&(),zp9m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How did Galileo prove his theory on falling bodies?",
                "He invited the entire university to witness his experiment which proved that two bodies of unequal weight could reach the ground at the same time."
            ],
            "flags": 0,
            "guid": "n#HRMJi#i9",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why was Galileo‚Äôs work significant in the birth of modern science?",
                "Because he challenged authority and relied on observation and experimentation to form his thoeries, which laid the groundwork for the scientific method"
            ],
            "flags": 0,
            "guid": "Nd~|*HU.><",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Were John Locke, George Berkeley and David Hume positivists or empericists?",
                "They were the British empiricists in the seventeenth and eighteenth centuries."
            ],
            "flags": 0,
            "guid": "Bb+5?hSe<-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What did positivists berlieve about knowledge?",
                "That knowledge should be derived from the facts of experience."
            ],
            "flags": 0,
            "guid": "fVQ=m(eEhP",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do humans see using their eyes? (Hint: something with a retina‚Ä¶)",
                "Humans use their eytes, which contain a lens and a retine. The lens refracts rays of light from a viewed object to form an image on the retina, which records the information carried by optic nerves to the brain."
            ],
            "flags": 0,
            "guid": "iv#KI}6Ny=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who said ‚Äúthere is more to seeing than meets the eyeball‚Äù?",
                "N.R. Hanson"
            ],
            "flags": 0,
            "guid": "nh1@mwW{{Z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is it possible for the same physical object to be viewed differently by different people?",
                "Yes, the perceptual experiences that individual have in the act of seeing are not uniquely determined by the images on their retinas."
            ],
            "flags": 0,
            "guid": "c]^9!Q38[b",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The image on the observer‚Äôs retina does not solely determine what an observer sees. What does their subjective experience also depend on?",
                "Their past expereince, knowledge and expectations."
            ],
            "flags": 0,
            "guid": "d%300#3BK}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The fact that beginners often have difficulty descerning cell structures through a microscope shows what? ",
                "That they are not yet familiar with what to look for. It shows that the vision is not a reliable source."
            ],
            "flags": 0,
            "guid": "jQ~nad]W!a",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is it wrong that observers viewing the same scene from the same place see the same thing bu tinterpret what they see differently?",
                "As far as perception is concerned, the only thing with which an observer has direct and immediate contact are his or her epceriences, which vary with the observer‚Äôs knowledge and expectations."
            ],
            "flags": 0,
            "guid": "AyN-z>EJk)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Other than the physical cause of the images on our ratines, what factors affect what we see?",
                "The inner state: Cultural Upbringing, Knowledge and Expectations."
            ],
            "flags": 0,
            "guid": "p~ck2]vf&q",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an observation statement?",
                "An observation statement is a statement that can be confirmed or refuted by observation, once the appropriate observational techniques have been mastered."
            ],
            "flags": 0,
            "guid": "QbQek*9RCM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How does knowledge according to empiricists differ from knowledge according to logical positivists?",
                "Empiricists view knoedlge as derived from what is delivered to the mind via the senses, while logical positivists view knowledge as based on observable facts."
            ],
            "flags": 0,
            "guid": "zRvl$k<|&.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is logical positivism?",
                "A philosophical movement that emphasizes the use of scientific methods to analyze and verify knowledge."
            ],
            "flags": 0,
            "guid": "v`1p{-iAq-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is observation alone enough for scientific accuracy?",
                "No, practical interventions are needed to verify observable facts."
            ],
            "flags": 0,
            "guid": "kV]D1UN@~V",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the Copernican theory?",
                "The (controversial) claim that the earth moves, spinning on its axes once a day, and orbiting the sun once a year."
            ],
            "flags": 0,
            "guid": "L0UDBn+FN)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How was the argument of the moon being left behind if the earth moves undermined?",
                "By the acknowledgement that Jupiter has moons, which are carried with it, exhibiting the same phenomenon."
            ],
            "flags": 0,
            "guid": "lUC`tSI{|.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the concept of observable facts in science?",
                "Observation statements constitute facts worthy of forming part of the basis for science if they can be straightforwardly tested by the senses and withstand those tests."
            ],
            "flags": 0,
            "guid": "PO85wKh,u`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are observable facts in science fallible?",
                "Yes, to some degree. And they are subject to revision if new kinds of tests become possible in the light of advances in knowledge and technology."
            ],
            "flags": 0,
            "guid": "D|%&lK8:^G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can observation statements be considered as observable facts if they have passed all tests that can be leveled at them?",
                "Yes"
            ],
            "flags": 0,
            "guid": "H!u_`P#%n]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are all facts established by observation relevant for science?",
                "No, the vast majority of facts that can be established by observation are totally irrelevant for sceicen."
            ],
            "flags": 0,
            "guid": "GR7^dAl.?N",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is science only about establishing facts?",
                "No, also about explaining them."
            ],
            "flags": 0,
            "guid": "e6NYODIu<Y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does science seek to understand?",
                "The underlying mechanisms and causes behind observable phenomena."
            ],
            "flags": 0,
            "guid": "Kj%:bL[T$J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the limitation of logical deduction when it comes to establishing the truth of factual statements?",
                "Logical deduction alone cannot establish the truth of factual statements. It can only show that if the premises are true and the argument is valid, then the conclusion must be true."
            ],
            "flags": 0,
            "guid": "ko|17uUo(O",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter4"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What distinguishes inductive arguments from deductive arguments?",
                "Inductive arguments go beyond what is contained in the premises, while deductive arguments rely solely on the premises for their conclusion."
            ],
            "flags": 0,
            "guid": "Mo:.0xCUY:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter4"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the problem of induction and who was the philosopher who articulated it?",
                "The problem of induction refers to the question of how induction itself is to be justified. It was articulated by David Hume, an eighteenth-century philosopher who argued that all scientific knowledge must be justified either by an appeal to (deductive) logic or by deriving it from experience. "
            ],
            "flags": 0,
            "guid": "mFjcEfc$S$",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter4"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is falsificationism?",
                "The principle that scientific theories should be testable and able to be proven false through empirical evidence."
            ],
            "flags": 0,
            "guid": "DW_b61RZIN",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who was Karl Popper?",
                "An Austrian philosopher, and the most prominent representative of falisificationism."
            ],
            "flags": 0,
            "guid": "D[=UF<=p[V",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who were the Vienna Circle?",
                "A group of philosophers who were proponents of logical positivism and who were active in Vienna in the early 20th century."
            ],
            "flags": 0,
            "guid": "qyo*?Q$bnp",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the key idea of falsificationism?",
                "That scientific theories are falsifiable."
            ],
            "flags": 0,
            "guid": "i!y)^Cv@2/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "According to falsificationists, how should theories be tested?",
                "Rigorously and ruthlessly by observation and experiment."
            ],
            "flags": 0,
            "guid": "xq]Uh*+pb9",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the aim of science, according to falsificationism?",
                "To eliminate false theories and replace them with better ones."
            ],
            "flags": 0,
            "guid": "iEoLJ,t6rB",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do falsificationsts view induction in science?",
                "They do not believe that science involves induction."
            ],
            "flags": 0,
            "guid": "d(LL9M+vbI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is meant by falsifiable?",
                "Falsifiable refers to the ability of a hypothesis or system of hypotheses to be tested by empirical observations in order to potentially prove it false."
            ],
            "flags": 0,
            "guid": "GU1Ghq,FH}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean for a hypothesis to be falsifiable?",
                "A hypothesis is falsifiable if there exists a logically possible observation statement or set of observation statements that are inconsistent with it. That is, which, if established as true, would falsify the hypothesis."
            ],
            "flags": 0,
            "guid": "e@!Vj1CqM+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can a hypothesis be true and falsifiable?",
                "Yes. If a hypothesis can be falsified, but the falsification is not valid (or true), it is falsifiable but still true."
            ],
            "flags": 0,
            "guid": "l!jeR}?N>r",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the problem with Marxism and Freudianism according to falsificationists?",
                "That they are not falsifiable."
            ],
            "flags": 0,
            "guid": "AW.@z|ckpa",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What should we do with theories that have been falsified?",
                "They must be ruthlessly rejected."
            ],
            "flags": 0,
            "guid": "Ki[SW`q%4D",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can a scientific theory ever be proven true according to the falsificationist view?",
                "No, according to the falsificationist view, a scientific theory can never be proven true because it is always subject to potential falsification through further testing and observation. "
            ],
            "flags": 0,
            "guid": "HB[zG3<f,k",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are ad hoc modifications?",
                "Ad hoc modifications are modifications made to a theory that have no new testable consequences and are designed to protect the theory from falsificationism."
            ],
            "flags": 0,
            "guid": "s*cKWt_u9f",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter5"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why are ad hoc modifications generally not acceptable to falsificationists?",
                "Because they believe that as a science progresses, its theories should become more falsifiable and informative. Ad hoc modifications are seen as ways to prevent a theory from being falsified, rather than making it more informative."
            ],
            "flags": 0,
            "guid": "c}$Ri!O^k8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter6"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an ad hoc hypothesis?",
                "A hypothesis created solely to defend a theory or explanation from being falsified without providing any new evidence or tests."
            ],
            "flags": 0,
            "guid": "CpWZ%vi`ON",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter6"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is making novel predictions important in the falsificationist account of science?",
                "Because it leads to new tests that can confirm or falsify bold conjectures, and thus contribute to the growth of scientific knowledge."
            ],
            "flags": 0,
            "guid": "yXOFJ[9%9c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter6"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What makes a prediction considered novel?",
                "if it involves some phenomenon that does not figure in, or is perhaps explicitly ruled out by the background knowledge of the time."
            ],
            "flags": 0,
            "guid": "I%Z#_{G--t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter6"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the main difference between falsificationism and inductivism?",
                "Falsificationism recognizes that facts and theories are fallible, while inductivism requires science to hav ean unproblematic factual foundation."
            ],
            "flags": 0,
            "guid": "Kr?,4vOS:+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter6"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is it impossible to conclusively falsify a theory through observation?",
                "Even if a theory is based on strong observation, the falsificationist‚Äôs position rejects the idea that it is immune to future disproof, and newer evidence or knowledge may alter its standing."
            ],
            "flags": 0,
            "guid": "N&B[sbd|qg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter7"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the Duhem/Quine thesis?",
                "The Duhem/Quine thesis refers to the idea that a theory cannot be conclusively falsified because an incorrect prediction may be caused by factors other than the theory under test."
            ],
            "flags": 0,
            "guid": "tW-`t:>gCx",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter7"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is the falsificationism methodology inadequate on historical grounds?",
                "Because if it had been strictly adhered to be scientists, many scientific advanced would not have been made. "
            ],
            "flags": 0,
            "guid": "CmgVQ%X6[K",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter7"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is conscious ignorance?",
                "A state of acknowledging that one does not know something and it is a prelude to real advanced in knowledge."
            ],
            "flags": 0,
            "guid": "gUK(71;0hE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter7"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The three components of the common view of science‚Äôs basis on facts are: \n<ul>\n<li>(a) Facts are directly given to careful, unprejudiced observers via {{c1::the senses}}</li>\n<li>(b) Facts are prior to and independent of {{c2::theory}}</li>\n<li>(c) Facts constitute a firm and reliable foundation for {{c3::scientific knowledge}}</li>\n</ul>",
                ""
            ],
            "flags": 0,
            "guid": "qgAQ(){bS>",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The two points strongly suggested by the account of observation through the sense of sight are:\n<ul>\n<li>(a) A human observer has more or less direct access to {{c1::knowledge of the world}} through their senses, and</li>\n<li>(b) The observer‚Äôs brain records the information carried by optic nerves to constitute their experience of seeing an object.</li>\n</ul>",
                ""
            ],
            "flags": 0,
            "guid": "Z510aX#l?",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::theory-of-science",
                "CS::WITT::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who invented C++ and when?",
                "C++ was invented by Bjarne Stroustrup in the 1980s"
            ],
            "flags": 0,
            "guid": "I*,?/K-kH[",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is C++ compiled to native code?",
                "Yes, C++ is compiled to native code."
            ],
            "flags": 0,
            "guid": "w:b?e+XMFR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the zero-overhead principle in C++?",
                "The zero-overhead principle in C++ means that if you don‚Äôt use a feature, you don‚Äôt pay for it."
            ],
            "flags": 0,
            "guid": "qh*~Bk}gzF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is C++ based on? (Languages)",
                "C++ is based on two key programming languages: <ul>\n<li>C (which provides direct mapping to hardware), and</li>\n<li>Simula (Which introduces classes, objects, iheritance, and virtual functions)</li>\n</ul>"
            ],
            "flags": 0,
            "guid": "n%j`3$k&}>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between an integer and a floating-point number?",
                "Integers are whole numbers without any decimal points, while floating-point numbers represent real numbers with decimal points."
            ],
            "flags": 0,
            "guid": "q@EolY^~3M",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the data structure used for representing a sequence of characters in C++?",
                "The data structure used for representing a sequence of characters in C++ is called <pre>std::string</pre>."
            ],
            "flags": 0,
            "guid": "m-IJ`9q-x`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a list (std::vector) and a dictionary (std::map) in C++?",
                "A list is a sequentual collection of elements, while a dictionary is a key-value pair collection where each value is associated with a unique key."
            ],
            "flags": 0,
            "guid": "Imo(ZQoWVR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the data type used to represent Boolean values in C++?",
                "<pre>bool</pre>"
            ],
            "flags": 0,
            "guid": "hUqvld=i@Y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the meaning of argc and argv in the main function in C++?",
                "argc is an integer that represents the number of command line arguments passed to the program. Argv is an array of strings that contains the command line arguments themselves."
            ],
            "flags": 0,
            "guid": "oqk*D9~F)G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is <pre>std</pre> in C++?",
                "The namespace for the standard library"
            ],
            "flags": 0,
            "guid": "FI~#W~QwaT",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between ‚Äú\\n‚Äù and ‚Äústd::endl‚Äù? ",
                "‚Äú\\n‚Äù is simply a newline character, while ‚Äústd::endl‚Äù also flushes the stream."
            ],
            "flags": 0,
            "guid": "e]gfd%1CN=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is string concatenation achieved?",
                "Simply by using the ‚Äú+‚Äù operator with two strings."
            ],
            "flags": 0,
            "guid": "biYbFXAwA8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can namespaces in C++ be nested?",
                "Yes, namespaces in C++ can be nested to create a hierarchy of related functions and variables."
            ],
            "flags": 0,
            "guid": "w_-Z8mWN./",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a namespace in C++?",
                "A namespace in C++ is a mechanism for grouping related types and functions together. "
            ],
            "flags": 0,
            "guid": "E=@yC/sC!}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a function definition and a function declaration in C++?",
                "A function definition in C++ provides the actual implementation of the function, whereas a function declaration only provides the function signature."
            ],
            "flags": 0,
            "guid": "fuZ<oC|g|`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between <pre>g++</pre> and <pre>g++ -S</pre>?",
                "<pre>g++</pre> is used for compiling and linking C++ programs, whereas <pre>g++ -S</pre> is used for generating assembly language from a C++ source file."
            ],
            "flags": 0,
            "guid": "j]7h*Ovr(X",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of <pre>g++ -c</pre>?",
                "It is used for compiling a C++ source file into an object file."
            ],
            "flags": 0,
            "guid": "NGuli6O1Rt",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of the \"LDFLAGS\" variable in the Makefile?",
                "The purpose of the \"LDFLAGS\" variable in the Makefile is to add additional linker flags (e.g. library paths)."
            ],
            "flags": 0,
            "guid": "J,:4y[LB}8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::makefile",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of the Makefile?",
                "The Makefile is used to compile and link the source code to create an executable program."
            ],
            "flags": 0,
            "guid": "MIIX)WyCdH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::makefile",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the fundamental type void used for?",
                "Void is used to represent the absence of a value. It is often used as a return type when a function does not need a return value."
            ],
            "flags": 0,
            "guid": "kAD95zsU=0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the advantage of using nullptr instead of NULL?",
                "nullptr is a keyword introduced in C++11 that is specifically designed to represent a null pointer. Unlike the macro NULL, which is actually an integer value, nullptr cannot be implicitly converted to an integral type, which can help avoid certain bugs and make code more type-safe."
            ],
            "flags": 0,
            "guid": "D+d^m8[N^G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the three floating-point types in C++?",
                "The three floating-point types in C?+ are float, double, and long double."
            ],
            "flags": 0,
            "guid": "f7ErOZ+CB0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between an integral type and a floating point type?",
                "An integral type represents whole numbers, while a floating-point type represents numbers with a fractional part."
            ],
            "flags": 0,
            "guid": "L|e{n{7]CL",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the two possible values for a boolean type?",
                "true and false"
            ],
            "flags": 0,
            "guid": "s[Ccp5-?uI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is undefined behavior?",
                "Undefined behavior refers to a situation when the compiler is allowed to produce whatever code it feels like."
            ],
            "flags": 0,
            "guid": "Qn$B(KaHJ)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of sanitizers?",
                "To detect undefined behavior or other errors in C++ code during the compilation process. It helps in identifying issues that may cause problems at runtime and provides developers with valuable feedback to fix them."
            ],
            "flags": 0,
            "guid": "FfWTmW#IQ7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens during default initialization for fundamental types?",
                "During initialization for fundamental types, nothing is done and the value of the variable is indeterminate."
            ],
            "flags": 0,
            "guid": "LC<L$#k6G?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Valgrind?",
                "A tool that can be used to detect various types of program errors, including memory leaks, use of uninitialized variables, and other memory-related problems."
            ],
            "flags": 0,
            "guid": "LNx>dZyR.u",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a reference in C++?",
                "A reference in C++ is an alias, which refers to the same memory location as the original object."
            ],
            "flags": 0,
            "guid": "DwoL]hR;4u",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when you try to declare a reference that is not bound to an object?",
                "It will result in a compilation error"
            ],
            "flags": 0,
            "guid": "N!xoe-1)<0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between passing by value and passing by reference?",
                "Passing by value creates a copy of the argument, while passing by references allows direct access to the original argument."
            ],
            "flags": 0,
            "guid": "wx$SQ^?CI^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can a reference be rebound to a different object in C++?",
                "No."
            ],
            "flags": 0,
            "guid": "Q$^<fL#eBf",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is const correctness?",
                "Const correctness is a coding practice in C++ where const keyword is used to declare a variable, function parameter or function return value that cannot be changed."
            ],
            "flags": 0,
            "guid": "rr[_6m9]#F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when we try to modify a const variable?",
                "It results in a compiler error"
            ],
            "flags": 0,
            "guid": "mb<KqD>to>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is it possible to modify a const reference variable?",
                "No, this will result in a compiler error."
            ],
            "flags": 0,
            "guid": "mx*4+LUI|0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of the keyword ‚Äúconstexpr‚Äù in C++?",
                "The keyword is used to declare constants that can be evaluated at compile time."
            ],
            "flags": 0,
            "guid": "P/e%3^KLL,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an enum in C++?",
                "An enum is a type that allows a group of related integher constants to be assigned symbolic names."
            ],
            "flags": 0,
            "guid": "kr@RCM1),z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between unscoped and scoped enums?",
                "Unscoped enums don‚Äôt have a specified scope, and their values can be accessed directly by their name. Scoped enums have a specified scope, and their values can only be accessed using the scope resolution operator (::)."
            ],
            "flags": 0,
            "guid": "J>rP/Ks@2)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you declare a scoped enum in C++11?",
                "<pre>enum struct</pre> or <pre>enum class</pre> followed by the name and the list of values."
            ],
            "flags": 0,
            "guid": "Kh5,Wyqn!v",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are layers of abstraction?",
                "Layers of Abstraction refers to discussing the same topic at multiple levels, form the messy reality to mathematical model, abstract algorithms etc."
            ],
            "flags": 0,
            "guid": "mlSkOad#5F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an abstract entity?",
                "An abstract entity is an individual, eternal, unchangeable thing. Exmaples include an orange, the number 49, or a person‚Äôs name."
            ],
            "flags": 0,
            "guid": "D]H,wrGr[D",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can a concrete entity come into and out of existence?",
                "Yes. This may refer to physical things, as well as legal, financial, or political entities. "
            ],
            "flags": 0,
            "guid": "KaZh0/_b0x",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of abstract species?",
                "Abstract species is a description of common properties of essentially equivalent abstract entities, such as color, natural number or text strings."
            ],
            "flags": 0,
            "guid": "e}5Rt={ivw",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between abstract genus and concrete genus?",
                "Abstract genus is a description of abstract species that are similar in some respect, like number or binary operator.\nConcrete genus is a description of concrete species that are similar in some respect, like mammal or biped."
            ],
            "flags": 0,
            "guid": "j?^[X~.L5?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can an entity belong to multiple species?",
                "No, an entity can belong to exactly one species, which provides rules for its behavior."
            ],
            "flags": 0,
            "guid": "E)qs?[*c*B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can an entity be equivalent to another entity in a different species?",
                "Yes. For example 42 as a natural number is equivalent to 42 as a real number."
            ],
            "flags": 0,
            "guid": "KltBW~<|P5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a value type?",
                "A type that represents a value, such as bool or int"
            ],
            "flags": 0,
            "guid": "JmuevS:>8h",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the two categories of value type?",
                "The two categories of value type are total and properly partial"
            ],
            "flags": 0,
            "guid": "dVN!0Us`u4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean for a value type to be uniquely represented?",
                "When each entity of the value type has a unique representation, it is considered to be uniquely represented. "
            ],
            "flags": 0,
            "guid": "HBv<=UY8k@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an object? ",
                "A representation of a concrete entity as a value in memory."
            ],
            "flags": 0,
            "guid": "b5yHU^fsBD",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is meant by the ‚Äòstate‚Äô of an object?",
                "The state of an object refers to the set of values that define the object‚Äôs attributes at any given point in time."
            ],
            "flags": 0,
            "guid": "cvy4)8k*fo",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::foundations",
                "CS::generic-programming::hello-world"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an object in C++?",
                "An abstract region of storage with storage duration, lifetime, type, value and size."
            ],
            "flags": 0,
            "guid": "Iyv9GJzLkD",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a variable in C++?",
                "A name for either an object or a reference."
            ],
            "flags": 0,
            "guid": "Oq_a;8ViTE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of std::nullptr_t?",
                "It is a type used to represent a null pointer in C++. It helps the compiler, in a way that NULL can not."
            ],
            "flags": 0,
            "guid": "C<]8q?]3ax",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an array type? ",
                "An array type allows for multiple objects to be stored sequentially in memory."
            ],
            "flags": 0,
            "guid": "mz{+W}<3h0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a union type in C++?",
                "A union type in C++ allows for different data types to be stored in the same memory location, but only one member of the union can be accessed at a time."
            ],
            "flags": 0,
            "guid": "ceoZ-/t.k_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the lifetime of an automatic variable?",
                "From definition to end-of-scope"
            ],
            "flags": 0,
            "guid": "g*?9aUfE-M",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the lifetime of a static variable?",
                "From program start to end"
            ],
            "flags": 0,
            "guid": "x#/QCE7PIO",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the lifetime of a dynamic variable?",
                "From <i>new</i> to <i>delete</i>."
            ],
            "flags": 0,
            "guid": "Gm<kju>OgY",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the lifetime of a thread-local variable?",
                "From thread start to end"
            ],
            "flags": 0,
            "guid": "Oj518X$@^m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the lifetime of a temporary variable?",
                "From materialization to end of the largest enclosing expression."
            ],
            "flags": 0,
            "guid": "E`4+^hXx[g",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a constructor in C++?",
                "A procedure that transforms a region of memory into an object, starting its life."
            ],
            "flags": 0,
            "guid": "n;p/%u]c$t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a destructor in C++?",
                "A procedure that ends the life of an object."
            ],
            "flags": 0,
            "guid": "qG)W4rnh,q",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is meant by an object being well-formed in C++?",
                "An object is well-formed if it actually represents a value."
            ],
            "flags": 0,
            "guid": "bV&W-|#Yg@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an object DefaultConstructible?",
                "If it doesn‚Äôt need an argument to be constructed, i.e. if <pre>T u; T u{}; T(); T{};</pre> are valid."
            ],
            "flags": 0,
            "guid": "G/5RL`%84c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are Member Initializer Lists in C++?",
                "A way to initialize the member variables of a class in the constructor."
            ],
            "flags": 0,
            "guid": "cm4f$Um+6m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the advantage of using Member Initializer Lists in C++?",
                "They can improve performance, as it avoids the default initialization of class member variables and directly initializes them in the constructor."
            ],
            "flags": 0,
            "guid": "Se}wK0/ZC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when the lifetime of an object ends?",
                "The destructor of the object is called."
            ],
            "flags": 0,
            "guid": "Cp_b>T8fw_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is the destructor written for object T?",
                "<pre>~T()</pre>"
            ],
            "flags": 0,
            "guid": "i55!rlBl+F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a memory leak?",
                "A memory leak occurs when a program fails to release memory that it no longer needs, thus wasting system resources."
            ],
            "flags": 0,
            "guid": "qY$?/:)j+>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the keyword ‚Äúdelete‚Äù do in C++?",
                "Frees memory allocated on the heap by a previously created object."
            ],
            "flags": 0,
            "guid": "g3{c>8nh=3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of a copy constructor for a class?",
                "To create a new object by copying an existing object."
            ],
            "flags": 0,
            "guid": "&Ffpy7erh",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a CopyConstructible concept in C++?",
                "A type that can be copied from another object"
            ],
            "flags": 0,
            "guid": "li#:4{g&!?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a CopyAssignable concept in C++?",
                "A type that can be assigned from another object"
            ],
            "flags": 0,
            "guid": "t{I/&O?;{4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a Copyable concept in C++?",
                "A type that is both CopyConstructible and CopyAssignable"
            ],
            "flags": 0,
            "guid": "t`8Rd)-CoD",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of the EqualityComparable concept?",
                "To ensure that a type can be compared for equality."
            ],
            "flags": 0,
            "guid": "Rcx=tf:@,>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are operators in C++?",
                "Symbols used to perform operations on data types (+, -, *, / etc.)"
            ],
            "flags": 0,
            "guid": "w{6Dh~8-tM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can user-defined types be overloaded with operators in C++?",
                "Yes, user-defined types such as enums, unions, and normal classes can be overloaded with operators."
            ],
            "flags": 0,
            "guid": "dr$h5$I6v`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is operator overloading?",
                "A way of giving a different meaning or functionality to the existing operators in C++."
            ],
            "flags": 0,
            "guid": "A?9?_rB{cP",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of operator overloading?",
                "To make code more readable and reduce the amount of code needed to perform a certain task."
            ],
            "flags": 0,
            "guid": "jWQNB!+=>3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a struct in C++?",
                "A user-defined data type that groups together variables of different data types under one name."
            ],
            "flags": 0,
            "guid": "iOa29gw=l=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a friend function?",
                "A function that is not a member of a class, but has access to the private and protected data of the class through a friend declaration in the class definition."
            ],
            "flags": 0,
            "guid": "tj~6{U%sfz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why would you use a friend function in C++?",
                "You would use a friend function in C++ when you need to access the private or protected data of a class from a function that is not a member of that class."
            ],
            "flags": 0,
            "guid": "d1fcIj83f0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the syntax for declaring a friend function in a class definition?",
                "<pre>friend return_type function_name(arguments)</pre>."
            ],
            "flags": 0,
            "guid": "r`bLTLkxom",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does ‚ÄúFriendship is not mutual‚Äù mean?",
                "That just because you consider someone your friend, it doesn‚Äôt automatically mean that they consider you their friend."
            ],
            "flags": 0,
            "guid": "GD4S#<9;5y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the meaning of ‚ÄúFriendship is not transitive‚Äù?",
                "If A is a friend of B and B is a friend of C, it doesn‚Äôt necessarily mean that A is a friend of C."
            ],
            "flags": 0,
            "guid": "cx94x0OXe3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does ‚ÄúFriendship is not inherited‚Äù mean?",
                "That just because you are friends with someone in programming, it doesn‚Äôt automatically make their children your friends as well."
            ],
            "flags": 0,
            "guid": "dxNb)ME@c-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::operators-overloading-friends"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a virtual function in C++?",
                "A function that is declared within a base class and is intended to be overridden by a derived class."
            ],
            "flags": 0,
            "guid": "n$`peq+y@6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::inheritance-polymorphism"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a polymorphic object?",
                "A polymorphic object is an object that has at least one virtual function in its class hierarchy."
            ],
            "flags": 0,
            "guid": "Oi$6fU=wP8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::inheritance-polymorphism"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an abstract class in C++?",
                "An abstract class is a class that has at least one pure virtual function, which makes the whole class abstraxct and cannot be instantiated."
            ],
            "flags": 0,
            "guid": "D$gHQS_6]#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::inheritance-polymorphism"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of assert()?",
                "To check a condition in a program at runtime and crash the program if that condition is false."
            ],
            "flags": 0,
            "guid": "spLBbfCz<:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of std::abort()?",
                "To immediately terminate a program by sending a SIGABORT signal."
            ],
            "flags": 0,
            "guid": "O%VN}LIp*%",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of exception in C++?",
                "To handle errors and perform automatic stack unwinding with object destruction."
            ],
            "flags": 0,
            "guid": "Nh[19J^xcR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when an assertion fails?",
                "When an assertion fails, the prograsm crashes and terminates."
            ],
            "flags": 0,
            "guid": "cU%Eq$R>|2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between std::abort and std::exit?",
                "std::abort is used to terminate the program abnormally and does not allow cleanup code to run, while std::exit is used to terminate the program normally."
            ],
            "flags": 0,
            "guid": "bgiXZ`~I02",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the default class that all exceptions should be derived from?",
                "std::exception"
            ],
            "flags": 0,
            "guid": "e(mtLs}0Tn",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the std::logic_error class used for?",
                "When an error is related to the programming logic of the program"
            ],
            "flags": 0,
            "guid": "M|mO1SPOf4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the std::runtime_error class used for?",
                "When an error occurs during the exeuction of the program that is not related to its logic or any specific argument."
            ],
            "flags": 0,
            "guid": "L$kWis$WF8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the meaning of ‚Äúexception-safety‚Äù?",
                "The concept of writing programs that can handle and recover from unexpected events such as errors and exceptions in a safe and robust manner."
            ],
            "flags": 0,
            "guid": "C7q&5S2/K-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::error-handling"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of static_cast?",
                "To perform an explicit conversion of data."
            ],
            "flags": 0,
            "guid": "qt.+><S]S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the risk associated with downcasts done through static_cast?",
                "static_cast downcasts without check, which can lead to undefined behavior if used incorrectly."
            ],
            "flags": 0,
            "guid": "sdQZ#O}cGW",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of dynamic_cast?",
                "To perform a checked downcast."
            ],
            "flags": 0,
            "guid": "t98eC(Dcwy",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the potential disadvantage of using dynamic_cast?",
                "It can be expensive at runtime"
            ],
            "flags": 0,
            "guid": "PU<Oo?d3[#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of const_cast?",
                "To remove const qualification."
            ],
            "flags": 0,
            "guid": "s-_Y0v}cm|",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When can the use of const_cast lead to undefined behavior?",
                "If the original object was declared const."
            ],
            "flags": 0,
            "guid": "fQ;hF8:}}3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of reinterpret_cast?",
                "To interpret memory as a different type."
            ],
            "flags": 0,
            "guid": "hBM!xn]0x^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the potential disadvantage of using reinterpret_cast?",
                "There is no runtime cost, but it can lead to undefined behavior if used incorrectly."
            ],
            "flags": 0,
            "guid": "B,r`o#JzHX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an explicit cast?",
                "A combination of static_cast, const_cast and reinterpret_cast."
            ],
            "flags": 0,
            "guid": "o@KN(44&[F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is copying data different from moving data in C++?",
                "Copying data creates a new copy of an object in memory, while moving data simply transfers ownership of the data to a new location."
            ],
            "flags": 0,
            "guid": "JKyNt&7h-^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can all C++ types be copied?",
                "No, they need to be Copyable."
            ],
            "flags": 0,
            "guid": "O*cl2.:]3d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::conversions-value_categories-moving"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is STL in C++?",
                "The Standard Template Library, a framework for dealing with sequences of data."
            ],
            "flags": 0,
            "guid": "z8sQ_>6wbr",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In which programming language was STL first implemented?",
                "First Ada, then C++."
            ],
            "flags": 0,
            "guid": "Io+JIF6p>#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the four parts of STL?",
                "Containers, Algorithms, Iterators and Functions."
            ],
            "flags": 0,
            "guid": "e/.d$iR.@B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do Iterators do in STL?",
                "Iterators connect algorithms with containers."
            ],
            "flags": 0,
            "guid": "tD.E{W92ke",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do Functions do in STL?",
                "Functions customize containers and algorithms."
            ],
            "flags": 0,
            "guid": "i12u)Sz5I",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a sequence in programming?",
                "A collection of elements."
            ],
            "flags": 0,
            "guid": "gW2X~H/Lf?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an InputIterator?",
                "An iterator that reads and navigates through a sequence of elements in a forward diredction, but can only be passed through once."
            ],
            "flags": 0,
            "guid": "A)enqa;O/^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an OutputIterator?",
                "An iterator that writes and navigates through a sequence of elements in a forward direction, but can only be passed through once."
            ],
            "flags": 0,
            "guid": "G/H:w2jV4<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a ForwardIterator?",
                "An iterator that can read and write elements, navigates through a sequence of elements in a forward direction, and can be passed through multiple times."
            ],
            "flags": 0,
            "guid": "lkT+r*K}p{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a BidirectionalIterator?",
                "An iterator that has all the capabilities of a ForwardIterator, but can also navigate through a sequence of elements in a backward direction."
            ],
            "flags": 0,
            "guid": "po46P&Gm5w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a RandomAccessIterator?",
                "An iterator that has all the capabilities of a BidirectionalIterator, but can also move to any element within the range of the sequence using an offset index."
            ],
            "flags": 0,
            "guid": "on]mwV#>3s",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::iterators-ranges-algorithms"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "There are 5 types of lifetime (simplified):\n<ul>\n<li>{{c1::Automatic}}: from definition to end-of-scope</li>\n<li>{{c2::Static}}: from program start to end</li>\n<li>{{c3::Dynamic}}: from <i>new</i> to <i>delete</i></li>\n<li>{{c4::Thread-local}}: from thread start to end</li>\n<li>{{c5::Temporary}}: from materilization to end of largest enclosing expression</li>\n</ul>",
                ""
            ],
            "flags": 0,
            "guid": "K&_S;W,2%I",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::cpp",
                "CS::generic-programming::values-objects"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an associative property in math?",
                "If a property is associative, rearranging the parentheses do not change the outcome."
            ],
            "flags": 0,
            "guid": "OK]un;U=+m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::math"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an experiment?",
                "A procedure that yields one of a given set of possible outcomes"
            ],
            "flags": 0,
            "guid": "zcE&m1=A/k",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::algorithms-and-probability",
                "CS::math",
                "CS::probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the sample space of an experiment?",
                "The set of possible outcomes"
            ],
            "flags": 0,
            "guid": "bV7iBCYY.&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::algorithms-and-probability",
                "CS::math",
                "CS::probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an event in an experiment?",
                "A subset of the sample space"
            ],
            "flags": 0,
            "guid": "oy|L@N}1iB",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::algorithms-and-probability",
                "CS::math",
                "CS::probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the pigeonhole principle?",
                "The pigeonhole principle is a principle which states that if \\(k\\) is a positive integer, and \\(k+1\\) or more objects are placed into \\(k\\) boxes, then there is at least one box containing two or more of the objects."
            ],
            "flags": 0,
            "guid": "j_D<FPF_1k",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::algorithms-and-probability",
                "CS::math",
                "CS::combinatorics"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When are finite automata equivalent?",
                "If they recognize the same language"
            ],
            "flags": 0,
            "guid": "tEtixt)}IT",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the empty language?",
                "The empty language is the set with no strings"
            ],
            "flags": 0,
            "guid": "eV*v&Sva0Y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "With which symbol is the empty language denoted?",
                "\\(\\emptyset\\)"
            ],
            "flags": 0,
            "guid": "if57MoP4VX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Would the equation 1-(2-3) be left- or right-associative?",
                "Right-associative, as it would bind to the right."
            ],
            "flags": 0,
            "guid": "GG~H|E4/kR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is the class of regular languages closed under the union operation?",
                "Yes. You can prove this by making an NFA with a start state with two epsilon transitions to other finite automatas."
            ],
            "flags": 0,
            "guid": "y]e>;/BT8P",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages",
                "CS::finite-automata"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a string?",
                "A finite sequence of symbols in an alphabet"
            ],
            "flags": 0,
            "guid": "Fc9e2u0)T6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is the empty string \\(\\varepsilon\\) and the empty language \\(\\emptyset\\) the same type of object?",
                "No, the empty string is a string, the empty language is a set."
            ],
            "flags": 0,
            "guid": "qR>2,1Ih)y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When are finite automata useful?",
                "When we are attempting to recognize patterns in data."
            ],
            "flags": 0,
            "guid": "s|GK$%KV&@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages",
                "CS::finite-automata"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the empty string?",
                "The empty string is the string of length 0."
            ],
            "flags": 0,
            "guid": "Qof$)1CO+>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "By which greek symbol is the empty string denoted?",
                "\\(\\varepsilon\\) (epsilon)"
            ],
            "flags": 0,
            "guid": "g4)1#%G:(z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a DFA and NFA in the transition function?",
                "NFA may have arrows labeled with member of the alphabet or \\(\\varepsilon\\). Zero, one, or many arrows may exit from each state with label \\(\\varepsilon\\). For a DFA for each state and input symbol, there is exactly one unique next state."
            ],
            "flags": 0,
            "guid": "uWd7h)u*?=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages",
                "CS::finite-automata"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when an NFA is at a state with multiple ways to proceed after reading the symbol?",
                "The machine splits into <b>multiple copies</b> of itself, and follows all the possibilities in parallel."
            ],
            "flags": 0,
            "guid": "Hy(*Q)7F1F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages",
                "CS::finite-automata"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens in an NFA if there is nothing to be done at a state?",
                "The machine dies, along with the branch of computation associated with it."
            ],
            "flags": 0,
            "guid": "Cs[~y6#P`(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages",
                "CS::finite-automata"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does an NFA accept the input string?",
                "If <b>any</b> of the copies reach an accept state at the end of the input."
            ],
            "flags": 0,
            "guid": "w_gu(?Xe6E",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages",
                "CS::finite-automata"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In an NFA, if a state with an \\(\\varepsilon\\) symbol on an exiting arrow is encountered, what happens?",
                "The machine splits into multiple copies, one following each of the exiting \\(\\varepsilon\\)-labeled arrows, and one staying at the current state."
            ],
            "flags": 0,
            "guid": "ryb4.z)Q`l",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages",
                "CS::finite-automata"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a language?",
                "A language is a set of strings (finite or infinite)."
            ],
            "flags": 0,
            "guid": "DsF^S<C9,_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the objective in complexity theory?",
                "To classify problems as easy ones, and hard ones."
            ],
            "flags": 0,
            "guid": "nJjGa=O*XD",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the objective in computability theory?",
                "To classify problems as solvable and not solvable."
            ],
            "flags": 0,
            "guid": "s*dfgdW(/@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a sequence of objects?",
                "A list of the objects in some order."
            ],
            "flags": 0,
            "guid": "O8~!#>m6tS",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a binary relation?",
                "A relation whose domain is a set of pairs"
            ],
            "flags": 0,
            "guid": "eMKA8olXA)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an argument in an function?",
                "An input to a function"
            ],
            "flags": 0,
            "guid": "txWhn4n-<S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an alphabet?",
                "A finite, nonempty set of objects called symbols, symbolized by \\(\\Sigma \\)"
            ],
            "flags": 0,
            "guid": "MsCXY{5rkF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the string of length zero called?",
                "The empty string, written \\(\\epsilon\\)"
            ],
            "flags": 0,
            "guid": "s#9BMG]Qd_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <i>predicate</i> or <i>property</i> function?",
                "A function whose range is \\({TRUE,FALSE}\\)"
            ],
            "flags": 0,
            "guid": "D2B2~g_n|+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does <i>D</i> and <i>R</i> signify in \\(f: D \\to R\\)?",
                "Domain and Range"
            ],
            "flags": 0,
            "guid": "u.;#TD`M*d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The outputs of a function come from a set called what?",
                "Its <i>range</i>"
            ],
            "flags": 0,
            "guid": "Kc^9`b1$!-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the set of possible inputs to a function called?",
                "Its <i>domain</i>."
            ],
            "flags": 0,
            "guid": "oV!1s(bO6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a power set of A?",
                "The set of all subsets of A"
            ],
            "flags": 0,
            "guid": "uS3&!YFeHi",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a 2-tuple also called?",
                "An ordered pair"
            ],
            "flags": 0,
            "guid": "md}j#Q0c:I",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does repetition matter in a sequence?",
                "No"
            ],
            "flags": 0,
            "guid": "h-uM9ehp:d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <i>multiset</i>?",
                "A modification of the concept of a set that, unlike a set,  allows for multiple instances for each of its elements. "
            ],
            "flags": 0,
            "guid": "BEn1LF}+x/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is A a <i>proper subset</i> of B?",
                "When A is a subset of B and not equal to B."
            ],
            "flags": 0,
            "guid": "r:iTabb0ee",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a computational model?",
                "An idealized computer"
            ],
            "flags": 0,
            "guid": "g]Q2PfgQ:+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What language does a machine that takes no strings recognize?",
                "The empty language \\(\\emptyset\\)"
            ],
            "flags": 0,
            "guid": "L5&v^7E5T5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Let \\(N = \\{1,2,3,...\\}\\) be the set of natural numbers, what does it mean when we say that \\(N\\) is <i>closed under multiplication</i>?",
                "For any <i>x</i> and <i>y</i> in \\(N\\), the product \\(x \\times y\\) also is in \\(N\\),"
            ],
            "flags": 0,
            "guid": "IkxTBzF8?f",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which regular operation outputs (some) of the following with A = {good, bad}? <br/> {?, good, bad, goodgood, goodbad, badgood, badbad, goodgoodgood, goodgoodbad, goodbadgood, goodbadbad, . . . }",
                "The regular operation <b>star</b>."
            ],
            "flags": 0,
            "guid": "jqQiviF`Y~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a unary operation and a binary operation?",
                "A unary operation performs an action with a single operand. Binary operations perform actions with two operands. "
            ],
            "flags": 0,
            "guid": "K%RB>})E{k",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The regular operation <b>Star</b> is defined as such: \\(A* = \\{x_1x_2...x_k | k \\geq 0 and each x_i \\in A\\}\\). <br/> What does this function do in simple terms?",
                "The star operation is a unary operation that works by attaching any number of strings in A together to get a string in the new language. "
            ],
            "flags": 0,
            "guid": "Gc,)Ix?9>t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The regular operation <b>Concatenation</b> is defined as such: \\(A \\circ B = \\{xy | x \\in A and y \\in B\\}\\). <br/> What does this function do in simple terms?",
                "It attaches a string from A in front of a string from B in all possible ways to get the strings in the new language. "
            ],
            "flags": 0,
            "guid": "w@D|<cWW&Q",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When do we say that a language is a <b>regular language</b>?",
                "If some finite automaton recognizes it"
            ],
            "flags": 0,
            "guid": "vosUjufbh",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does L(M) = A mean?",
                "Machine M recognizes a set of strings A, also called language A"
            ],
            "flags": 0,
            "guid": "IGSCv}?CF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean if a collection of objects is <i>closed</i> under some operation?",
                "If applying that operation to members of the collection returns an object still in the collection "
            ],
            "flags": 0,
            "guid": "E%Aps!/Up;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Final states are another way of saying what?",
                "Accept states"
            ],
            "flags": 0,
            "guid": "Qx}`&ia,rq",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the probabilistic counterpart of finite automata?",
                "Markov Chains"
            ],
            "flags": 0,
            "guid": "HzK/z@E0m6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What kind of computers are finite automata good for?",
                "Computers with limited memory"
            ],
            "flags": 0,
            "guid": "cieRAe0t`h",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is deterministic computation?",
                "When a machine is in a given state and reads the next input symbol, we know what the next state will be."
            ],
            "flags": 0,
            "guid": "Ratl{])!Dn",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does an NFA do if there are multiply paths with the same input?",
                "Splits into multiple copies of itself and follows all the possibiliites in parallel. If there are more choices, it splits again, if it can‚Äôt go further, it is destroyed. If <i>any</i> of these copies of the machine is in an accept state at the end of the input, the NFA accepts the input string."
            ],
            "flags": 0,
            "guid": "EgL_#;us:e",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens if a state with an \\(\\epsilon\\) symbol on an exiting arrow is encountered?",
                "Without reading any input, the machine splits into multiple copies, one following each of the exiting \\(\\epsilon\\)-labeled arrows, and one staying at the current state. Then the machine proceeds nondeterministically as before."
            ],
            "flags": 0,
            "guid": "xY(7^wU*#m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a DFA?",
                "A deterministic finite automaton"
            ],
            "flags": 0,
            "guid": "oE2ey-*s&O",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an NFA?",
                "A nondeterministic finite automaton"
            ],
            "flags": 0,
            "guid": "t%Z{e|!ZTC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an alphabet containing only one symbol called?",
                "A unary alphabet"
            ],
            "flags": 0,
            "guid": "L1~H~Od=)O",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the one essential difference between the formal definition of a deterministic finite automaton and a nondeterministic finite automaton?",
                "They differ in the type of transifion function. In a DFA, the transition function takes a state and an input symbol and produces the next state. In an NFA, the transition function takes a state and an input symbol <i>or the empty string</i> and produces <i>the set of possible next states</i>"
            ],
            "flags": 0,
            "guid": "qgSa|3H~1O",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What languages do NFAs recognize, that DFAs do not?",
                "None, they both recognize the same class of languages."
            ],
            "flags": 0,
            "guid": "G-#;UKynzE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which NFAs can be converted into an equivalent DFA?",
                "Every NFA can be converted into an equivalent DFA."
            ],
            "flags": 0,
            "guid": "I,USy[e~X>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a language regular?",
                "If and only if some nondeterministic finite automaton recognizes it."
            ],
            "flags": 0,
            "guid": "pX8:&R?f7G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is data discovery?",
                "The process of finding data on which transformations will be made."
            ],
            "flags": 0,
            "guid": "g4Oh#TotpC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is data mapping?",
                "The process of mapping some data to other."
            ],
            "flags": 0,
            "guid": "dSbfFbfdn}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the resulting language of the regular expression \\((0\\cup 1)0*\\)?",
                "The language consisting of all strings starting with a 0 or a 1 followed by any number of 0s."
            ],
            "flags": 0,
            "guid": "y}f3Q5L._h",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The regular expression \\((0\\cup 1)0*\\) is shorthand for what? ",
                "\\((0\\cup 1)\\circ 0*\\)"
            ],
            "flags": 0,
            "guid": "Aq0}<BFaHt",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which is more powerful, finite automata or regular expressions?",
                "They are equivalent in their descriptive power."
            ],
            "flags": 0,
            "guid": "MS3GW;i}3B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is a language necessarily regular if it is described by a regular expression?",
                "Yes, a language is regular if and only if some regular expression describes it."
            ],
            "flags": 0,
            "guid": "n|KaBCW=ci",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is GNFA short for?",
                "Generalized nondeterministic finite automaton"
            ],
            "flags": 0,
            "guid": "w7?rIF$UHR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What can GNFAs do, that NFAs and DFAs can‚Äôt do?",
                "Use regular expressions in their transitional arrows."
            ],
            "flags": 0,
            "guid": "r[c..^OaX{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which kind of finite automaton has the transition function \\(\\delta : (Q - \\{q_{accept}\\ \\times (Q-\\{q_{start}\\}) \\rightarrow R)\\)?",
                "NDFAs"
            ],
            "flags": 0,
            "guid": "N28f5h7,kr",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the formal definition of a <i>finite automaton</i>?",
                "A 5-tuple \\( (Q, \\Sigma, \\delta, q_0, F) \\)"
            ],
            "flags": 0,
            "guid": "Co]2L7y1[n",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If two languages A1 and A2 are regular, what can be said of their union A1 \\(\\cup \\) A2?",
                "Their union is also regular, because regular languages are closed under the union operation"
            ],
            "flags": 0,
            "guid": "oO_N(S,O`(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When are two machines considered equivalent?",
                "If they recognize the same language"
            ],
            "flags": 0,
            "guid": "G35nTIzmln",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a regular expression?",
                "An expression describing a language that is built using regular operations."
            ],
            "flags": 0,
            "guid": "p`B),I7q]I",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the regular expression \\( (0 \\cup 1) \\) mean?",
                "Combine the results of {0} and {1} into one set, {0,1}"
            ],
            "flags": 0,
            "guid": "cp6ovQ[q`^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the regular expression \\( (0 \\cup 1)* \\) mean?",
                "It is the expression for the language consisting of all possible strings of 0‚Äôs and 1‚Äôs"
            ],
            "flags": 0,
            "guid": "bu+n4kZ^)z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the symbol \\(\\Sigma *\\) mean?",
                "The language consisting of all strings over a given alphabet."
            ],
            "flags": 0,
            "guid": "F(<RLu/e.:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the following regular expression denote? \\((0 \\Sigma *) \\cup (\\Sigma * 1)\\)",
                "It consists of all possible strings that start with a 0, or end with a 1."
            ],
            "flags": 0,
            "guid": "H^HzXl8?j`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is R+ shorthand for?",
                "R+ is the kleene star with at least one element, not \\(\\epsilon\\) (i.e. R+ = RR*)"
            ],
            "flags": 0,
            "guid": "sAxSXCP+=F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How many acceptance states should a finite automaton have?",
                "A finite automaton has a set of starting states, which may be any set of states, including the set \\(\\emptyset\\)."
            ],
            "flags": 0,
            "guid": "*eVx9CS|;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the set of acceptance states for the following DFA? <br/> <img src=\"dfa1.png\">",
                "{q3}"
            ],
            "flags": 0,
            "guid": "zs]xIWR#?S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between the <i>empty string</i> and the <i>empty language</i>?",
                "The empty string \\((\\epsilon )\\) is the string of length 0, while the empty language \\((\\emptyset )\\), is the language which is a set with no strings. "
            ],
            "flags": 0,
            "guid": "qij!hq;<:[",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can you use star operation on the empty string (\\(\\epsilon\\))?",
                "Yes."
            ],
            "flags": 0,
            "guid": "plUh>Uo{|H",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is tabular data?",
                "Data that can be encoded as text files using a designated seperator character between fields and newline between two records."
            ],
            "flags": 0,
            "guid": "gR?|)rtp8)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Header records may be found in tabular data formats, what are they?",
                "A first line specifying the names of the different fields"
            ],
            "flags": 0,
            "guid": "K1^el$~N`R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Where can you find information about different command-line tools?",
                "Via the man-pages, e.g. man grep. Many tools also have online manuals or tutorials and books."
            ],
            "flags": 0,
            "guid": "G8KmDMfk&Z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is grep short for?",
                "Global regular expression print"
            ],
            "flags": 0,
            "guid": "GlvRn$gg2V",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the -E option in grep do?",
                "With -E basically all characters that have special meaning are unescaped, meaning when using -E regular expressions are often more readable."
            ],
            "flags": 0,
            "guid": "uPtv5z)3q/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>sort</i> tool do?",
                "Sort input"
            ],
            "flags": 0,
            "guid": "wN=9ivV<W$",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>uniq</i> command do?",
                "Filter out adjacent matching lines, often used after sort"
            ],
            "flags": 0,
            "guid": "PAzhmNEXLq",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>tr</i> tool do?",
                "Translate or delete characters."
            ],
            "flags": 0,
            "guid": ">e9c4:ncB",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>cut</i> tool do?",
                "Remove sections from each line of files"
            ],
            "flags": 0,
            "guid": "Ou!&eaMC#@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>paste</i> tool do?",
                "Merge lines of files"
            ],
            "flags": 0,
            "guid": "t2-n;|6&2)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>join</i> tool do?",
                "Join lines of two files on a common (sorted) field"
            ],
            "flags": 0,
            "guid": "zadz1{/}C)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>head/tail</i> command do?",
                "Output the first/last part of files"
            ],
            "flags": 0,
            "guid": "NV,eh}jmna",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The front end of the compiler phases (Scanner -> Parser -> Symbol Collection -> Type Checking) ensure what? ",
                "That the input program is correct"
            ],
            "flags": 0,
            "guid": "y]_6,#4&qH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::6",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the back end of the compiler phases (Code Generation -> Emit) do?",
                "Generate the code for the correct input program (i.e. target code)"
            ],
            "flags": 0,
            "guid": "z_.7S40;Em",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::6",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When can optimization phases be inserted in the compiler phases?",
                "Before or after the code generation (the back end)"
            ],
            "flags": 0,
            "guid": "d#+3aNT+Ll",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::6",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the input and output of the lexical analysis scanners?",
                "The input is a stream of characters (the user program), the output is a stream of tokens."
            ],
            "flags": 0,
            "guid": "BZ>%!]g[jn",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::6",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A mathematical model of computation called {{c1::<i>finite automaton</i>}} is used in text processing, compilers, and hardware design.",
                "."
            ],
            "flags": 0,
            "guid": "b2pYp3J@vA",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A mathematical model of computation called {{c1::<i>context-free grammar</i>}} is used in programming languages and artificial intelligence.",
                "."
            ],
            "flags": 0,
            "guid": "btEK5f[&,$",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "{{c1::<b>Definitions</b>}} describe the objects and notions that we use.",
                "."
            ],
            "flags": 0,
            "guid": "c_rE6Q;E%o",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::proof}} is a convincing logical argument that a statement is true.",
                "."
            ],
            "flags": 0,
            "guid": "liZ]^06=,A",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::theorem}} is a mathematical statement proved true.",
                "."
            ],
            "flags": 0,
            "guid": "Ji?@GSc+=b",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A<i>finite automaton</i> is a 5-tuple (\\(Q, \\sum , \\delta , q_o, F\\)), where <br/>\n1. \\(Q\\) is a finite set called the {{c1::<b>states</b>}}, <br/>\n2. \\(\\sum \\) is a finite set called the {{c2::<b>alphabe</b>t}}, <br/>\n3. \\(\\delta : Q \\times \\sum \\to Q\\) is the {{c3::<b>transition function</b>}} <br/>\n4. \\(q_0 \\in Q\\) is the {{c4::<b>start state</b>}}, and <br/>\n5. \\(F \\subseteq Q\\) is the {{c5::<b>set of accept states</b>}}",
                "."
            ],
            "flags": 0,
            "guid": "G0rbl];,;n",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If A is the set of all strings that machine M accepts, we say that A is the <b>{{c1::language}} of machine M</b>.",
                "."
            ],
            "flags": 0,
            "guid": "t~F+>N&))z",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The natural steps in a data transformation process are {{c1::data discovery}} -> {{c2::data mapping}}  -> {{c3::code generation}} -> {{c4::code execution}} -> -> {{c5::data review}}.",
                "."
            ],
            "flags": 0,
            "guid": "F<RF4p)vV,",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the challenge in <i>leader election</i>?",
                "To elect a leader among a group of nodes."
            ],
            "flags": 0,
            "guid": "iG}.tuk`]X",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems",
                "CS::leader-election"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is distributed consensus?",
                "Distributed Consensus refers to an agreement on any subject by a group of participants in distributed systems."
            ],
            "flags": 0,
            "guid": "hoUq(`QkO%",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the worst case complexity of the Bully algorithm for Leader Election?",
                "Messages: \\(O(n^2)\\)"
            ],
            "flags": 0,
            "guid": "OF>TR^g(iU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems",
                "CS::leader-election"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the worst case complexity of the Ring algorithm for Leader Election?",
                "Messages: \\(O(n^2)\\); Time \\(O(n)\\)"
            ],
            "flags": 0,
            "guid": "Et-06-,w_!",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems",
                "CS::leader-election"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the best case complexity for the Bully Algorithm for Leader Election?",
                "\\(O(n)\\), because it has to send a victory message no matter what."
            ],
            "flags": 0,
            "guid": "xlXW4zny=L",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems",
                "CS::leader-election"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is the bully algorithm for leader election called the bully algorithm?",
                "Because you ‚Äúbully‚Äù processes with lower priority than you and ignore them."
            ],
            "flags": 0,
            "guid": "m;!)jm9Su-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems",
                "CS::leader-election"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is physical topology in distributed systems?",
                "Physical Topology in distributed systems is the placement of various nodes. The nodes in physical topology represent network nodes, routers, all end hosts (whether or not they‚Äôre participating). The edges represent all links, direct edges between end hosts."
            ],
            "flags": 0,
            "guid": "buo>#q]!~F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is logical topology in distributed systems?",
                "Logical Topology deals with the data flow in the network, i.e. how the data flows from one node to another. In logical topology, nodes are end hosts where applicatino executes, and edges are logical channels among these nodes."
            ],
            "flags": 0,
            "guid": "o{/s)<o+24",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is superimposed topology in distributed systems?",
                "Superimposed Topology is simply a topology overlay which is superimposed on Logical Topology. The goal is efficient information gathering, distirbution, or search."
            ],
            "flags": 0,
            "guid": "Ppt0kn03~p",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When vieweing the topology of distributed systems, is it typically viewed as a directed or undirected graph?",
                "Undirected graph in which the nodes represent processors, and the edges represent the links connecting the processors."
            ],
            "flags": 0,
            "guid": "HGScovX&E3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Application Execution in the context of distributed systems?",
                "Application Execution is comprised of the execution of instructions within the distributed program. Many instaces a Control Algorithm is also needed to be executed in order to monitor the application execution or to perform various auxiliary functions."
            ],
            "flags": 0,
            "guid": "i1q:_@2g~M",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the distributed control algorithm also sometimes termed as?",
                "Protocol. Although the term protocol is also loosely used for any distributed algorithm."
            ],
            "flags": 0,
            "guid": "k#~Ozn]X^&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a centralized algorithm?",
                "One in which a predominant amount of work is performed by one (or possibly a few) processors. Whereas the other processors play a relatively smaller role in accomplishing the joint task. "
            ],
            "flags": 0,
            "guid": "GV`H)JQQ5i",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a distributed algorithm?",
                "A distributed algorithm is one in which each processor plays an equal role in sharing the message overhead, time overhead and space overhead."
            ],
            "flags": 0,
            "guid": "/-!CKZT9N",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a symmetric algorithm?",
                "A symmetric algorithm is an algorithm in which all the processors execute the same logical functions. "
            ],
            "flags": 0,
            "guid": "LSzBs{Sub7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an assymetric algorithm?",
                "An assymetric algorithm is an algorithm in which different processors execute logically different (but perhaps partly overlapping) functions."
            ],
            "flags": 0,
            "guid": "hWPK=K2`22",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is a centralized algorithm symmetric or assymetric?",
                "A centralized algorithm will always be assymetric. Any algorithm that is not fully distributed must be assymetric."
            ],
            "flags": 0,
            "guid": "b2ka3)P,uS",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a uniform algorithm?",
                "A uniform algorithm is an algorithm that does not use the number of processes in the system a a parameter in its code."
            ],
            "flags": 0,
            "guid": "d^w/3^I18-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is a uniform algorithm desirable?",
                "Because it allows scalability, transparency, and processes can join or leave the dsitributed execution without intruding on the other processes, except its immediate neighbours that need to be aware of any changes in their immediate topology."
            ],
            "flags": 0,
            "guid": "mZVTJ=?zGc",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are adaptive algorithms?",
                "Adaptive algorithms are algorithms that can be expressed in terms of the number of nodes \"participating\" in a particular problem context, rather than in terms of the total number of nodes in the system. In other words, if an algorithm can be expressed in terms of the number of nodes that are relevant to solving a particular problem, rather than in terms of the total number of nodes in the system, then it is considered to be an adaptive algorithm. This allows the algorithm to scale more efficiently and effectively, since it can be tailored to the specific problem context at hand."
            ],
            "flags": 0,
            "guid": "O4+UsTZoRc",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a deterministic receive?",
                "Deterministic receive is a primitive which specifies the source from which it wants to receive a message."
            ],
            "flags": 0,
            "guid": "pCX^MjOUGw",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a non-deterministic receive?",
                "A non-deterministic receive is a primitive which can receive a message from any source ‚Äì the message delivered to the process is the first message that is queued in the local incoming buffer, or the first message that comes in subsequently if no message is queued in the local incoming buffer."
            ],
            "flags": 0,
            "guid": "DtmZRnL(/i",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does a distributed program have a deterministic execution?",
                "When the distributed program contains no non-deterministic receives."
            ],
            "flags": 0,
            "guid": "EN<`Z*j7qP",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does a distributed program have a non-deterministic execution?",
                "If a distributed program contains at least one non-deterministic receive primitive."
            ],
            "flags": 0,
            "guid": "fRCa=e_``^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a determinsitic receive and a non-deterministic receive?",
                "A deterministic receive primitive in a distributed system specifies the source from which it wants to receive a message, while a non-deterministic receive primitive can receive a message from any source. "
            ],
            "flags": 0,
            "guid": "P=cI<N!,tz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a protocol non-inhibitory?",
                "If no system event is disabled in any execution of the protocol."
            ],
            "flags": 0,
            "guid": "E}[1],2bd1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a protocol inhibitory?",
                "If a system event is disabled in any exeuction of the protocol"
            ],
            "flags": 0,
            "guid": "kHfVu/C*S8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are locally delayed disabled events?",
                "In a protocol execution, a disabled event is said to be locally delayed if it is currently disabled, but could become enabled in the future if some additional system event occurs and there is no intervening receive event."
            ],
            "flags": 0,
            "guid": "K1U^goi~Ic",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a protocol locally inhibitory?",
                "A protocol is locally inhibitory if any disabled event in any execution of the protocol is locally delayed, meaning that the delay in the event's activation is under the control of the local processor."
            ],
            "flags": 0,
            "guid": "Ov:q)3CFqZ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a protocol globally inhibitory?",
                "A protocol is globally inhibitory if there is at least one execution in which some delayed event is not locally delayed, meaning that the delay in the event's activation requires communication from another processor."
            ],
            "flags": 0,
            "guid": "C~ZN5E;Ab:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the different types of inhibitory protocols?",
                "The different types of inhibitory protocols are: send inhibitory, receive inhibitory, and internal event inhibitory."
            ],
            "flags": 0,
            "guid": "ld9@r%6p?i",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a protocol send inhibitory?",
                "A protocol is send inhibitory if some delayed events in the protocol are send events."
            ],
            "flags": 0,
            "guid": "Ikw7>2e+T:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a protocol receive inhibitory?",
                "A protocol is receive inhibitory if some delayed events in the protocol are receive events."
            ],
            "flags": 0,
            "guid": "lC_i#`wSEM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a protocol internal event inhibitory?",
                "A protocol is internal event inhibitory if some delayed events in the protocol are internal events, such as state transitions or other internal actions."
            ],
            "flags": 0,
            "guid": "vDW5S~&*O&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are distributed systems synchronous or asynchronous?",
                "Distributed systems are inherently asynchronous."
            ],
            "flags": 0,
            "guid": "fTkbcjxR^-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an on-line algorithm?",
                "An on-line algorithm is an algorithm that executes as the data is being generated."
            ],
            "flags": 0,
            "guid": "l_k#:Mwc]i",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an off-line algorithm?",
                "An off-line algorithm is an algorithm that requires all the data to be available before algorithm execution begins."
            ],
            "flags": 0,
            "guid": "M{8p|!@QPH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a failure model in distributed systems?",
                "A model that specifies the manner in which the components of the system may fail."
            ],
            "flags": 0,
            "guid": "w_T5`gpTyE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean if a system is t-fault tolerant?",
                "If it continues to satisfy its specified behavior as long as no more than t of its components (whether processes or links or a combination) fail."
            ],
            "flags": 0,
            "guid": "rR{5:Oz/g+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the fail-stop process failure model?",
                "In the Fail-stop failure model, a process may fail by stopping execution from some instant thenceforth, but other processes can learn of the failure. This model provides an abstraction, the exact mechanism by which other processes learn of the failure can vary."
            ],
            "flags": 0,
            "guid": "ptcqEeVIB?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is crash failure model?",
                "In the Crash failure model, a process may fail by stopping to function from any instance, but other processes do not learn of this crash."
            ],
            "flags": 0,
            "guid": "MAj~4g@F/:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is receive omission failure model?",
                "In the Receive Omission failure model, a process may fail by intermittently receiving only some of the messages sent to it or by crashing."
            ],
            "flags": 0,
            "guid": "q|Lvv;CGSj",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is send omission failure model?",
                "In the Send Omission failure model, a process may fail by intermittently sending only some of the messages it is supposed to send, or by crashing."
            ],
            "flags": 0,
            "guid": "bQk_lR?sBy",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is general omission failure model?",
                "In the General Omission failure model, a process may fail by exhibiting either or both of send omission and receive omission failures."
            ],
            "flags": 0,
            "guid": "JqzV_j!*zr",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Byzantine or malicious failure model with authentication?",
                "In the Byzantine or Malicious Failure, with authentication model, a process may exhibit any arbitrary behavior. However, if a faulty process claims to have received a specific message from a correct process, then that claim can be verified using authentication, based on unforgeable signatures."
            ],
            "flags": 0,
            "guid": "BCW1UUjwe}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Byzantine or malicious failure model without authentication?",
                "In the Byzantine or Malicious Failure model, the same as the Byzantine or Malicious Failure with authentication model, except without authentication to verify any claims made."
            ],
            "flags": 0,
            "guid": "L9>m;vPmt5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a wait-free algorithm?",
                "A wait-free algorithm is an algorithm in which a failure of suspension of any process cannot cause failure or suspension of another process."
            ],
            "flags": 0,
            "guid": "F!wbUY8Jo~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-Project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Other than the main challenge: to elect a leader among a group of nodes, <i>leader election</i> poses a few more challenges:<br/> <ul> \n<li>All nodes must {{c1::agree on the leader identity}}</li>\n<li>Nodes may {{c2::fail at any time, including the leader}}</li>\n<li>No machine has {{c3::a global consistent view: information is scattered across many machines and constantly updated.}}</li>\n</ul>",
                ""
            ],
            "flags": 0,
            "guid": "hQCXo<~&Wi",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-project",
                "CS::distributed-systems",
                "CS::leader-election"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The messages in the Bully Algorithm for Leader Election are: \n<ul>\n<li>{{c1::ELECTION: Sent to announce election}}</li>\n<li>{{c2::ALIVE: Response to ELECTION message}}</li>\n<li>{{c3::VICTORY: Sent by winner of the election to announce victory.}}</li>\n</ul>",
                ""
            ],
            "flags": 0,
            "guid": "r^>7a:QT9v",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-project",
                "CS::distributed-systems",
                "CS::leader-election"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The messages in the Ring Algorithm for Leader Election are:  \n<ul> \n<li>{{c1::PROBE (id): Sent to search for the leader}}</li> \n<li>{{c2::SELECTED (id): Result}}</li> \n</ul>",
                ""
            ],
            "flags": 0,
            "guid": "o}[O$gu|I0",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-project",
                "CS::distributed-systems",
                "CS::leader-election"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A Synchronous System is a system that satisfies the following properties:\n<ul>\n<li>There is a known upper bound on the {{c1::message communication delay}}</li>\n<li>There is a known bounded drift rate for the {{c2::local clock of each processor with respect ro real-time}}. The drift rate between {{c2::two clocks}} is defined as the rate at which their values diverge.</li>\n<li>There is a known upper bound on the time taken by {{c3::a process to execute a logical step in the execution}}</li>\n</ul>",
                ""
            ],
            "flags": 0,
            "guid": "BfwEj``=<!",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::Bsc-project",
                "CS::distributed-systems"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is GHCI?",
                "Glasgow Haskell Compiler"
            ],
            "flags": 0,
            "guid": "M{g2)QdF!C",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When using GHCI what should you do to negative numbers when working with them?",
                "Surround them with parentheses."
            ],
            "flags": 0,
            "guid": "N8yPMwdct?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you negate a <pre>True</pre> or <pre>False</pre>?",
                "Using the keyword <pre>not</pre>"
            ],
            "flags": 0,
            "guid": "k|rN;ybX7Q",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do the <pre>min</pre> and <pre>max</pre> functions do?",
                "Take the respectively maximum and minimum of two numbers."
            ],
            "flags": 0,
            "guid": "cXiL;n}apm",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the function for integral division?",
                "<pre>div</pre>"
            ],
            "flags": 0,
            "guid": "wF*2(;l[fA",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the main difference between Haskell‚Äôs if statement and if statements in imperative languages?",
                "The else part is mandatory in Haskell."
            ],
            "flags": 0,
            "guid": "dQkRt4,Ugj",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an expression?",
                "A piece of code that returns a value"
            ],
            "flags": 0,
            "guid": "PTSoDLFlii",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In Haskell, is <pre>5</pre> an expression?",
                "Yes, because it returns the value 5."
            ],
            "flags": 0,
            "guid": "JxcOf5pI3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is the function <pre>DoubleMe x = x + x</pre> not valid?",
                "Because the name begins with a capital letter."
            ],
            "flags": 0,
            "guid": "qla)X}deX4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are lists homogeneous or heterogeneous?",
                "Homogeneous, it stores several elements of the same type."
            ],
            "flags": 0,
            "guid": "mPsR2d4*{m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the string <pre>‚Äùhello‚Äù</pre> syntactic sugar for?",
                "<pre>[‚Äòh‚Äô,‚Äôe‚Äô,‚Äôl‚Äô,‚Äôl‚Äô,‚Äôo‚Äô]</pre>"
            ],
            "flags": 0,
            "guid": "m@dK$df;uA",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you put two lists together?",
                "<pre>++</pre>"
            ],
            "flags": 0,
            "guid": "LWw*~uL(li",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you put something on the beginning of a list?",
                "Using <pre>:</pre>. E.g. <pre>5:[1,2,3,4,5]</pre> results in <pre>[5,1,2,3,4,5]</pre>"
            ],
            "flags": 0,
            "guid": "h67[iMFlJr",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is [1,2,3] syntactic sugar for?",
                "1:2:3:[], meaning 1 prepended to 2, 2 prepended to 3 and 3 prepended to an empty list."
            ],
            "flags": 0,
            "guid": "d(lyQLoz4t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do we get an element out of a list by index?",
                "Using <pre>!!</pre>. Indices start at 0"
            ],
            "flags": 0,
            "guid": "BC9p18>fU4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are lists inside of lists allowed to have different types?",
                "No, each list inside of a list has to have the same elements e.g. only Integers, only Chars etc."
            ],
            "flags": 0,
            "guid": "Co@l8l;04W",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the head of the list?",
                "The first element"
            ],
            "flags": 0,
            "guid": "f}z+/#u+Li",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the <pre>tail</pre> of a list?",
                "All other elements than the head"
            ],
            "flags": 0,
            "guid": "H;x?;-pSE(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the <pre>last</pre> of a list?",
                "The last element"
            ],
            "flags": 0,
            "guid": "o.C])]~9+C",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the <pre>init</pre> of a list? ",
                "Everything except the last element"
            ],
            "flags": 0,
            "guid": "mnj[ri9umg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do we check whether a list is empty?",
                "Using <pre>null</pre>"
            ],
            "flags": 0,
            "guid": "mJhI&,_;@I",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <pre>take x</pre> function do?",
                "Takes <pre>x</pre> amount of elements from the beginning of a list."
            ],
            "flags": 0,
            "guid": "B1&lDT;5#x",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between the <pre>max, min</pre> and <pre>maximum, minimum</pre> function?",
                "<pre>max, min</pre> take two numbers as arguments, <pre>maximum, minimum</pre> take a list of stuff that can be put in some kind of order."
            ],
            "flags": 0,
            "guid": "fJ`^;p1R/E",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do we see whether a thing is an element of a list? ",
                "Using the <pre>elem</pre> function. E.g. <pre>elem 4 [1,2,3,4]</pre> (True)"
            ],
            "flags": 0,
            "guid": "baGHQ]uGPR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using ranges, how do you get a list of numbers from 1 to 20?",
                "<pre>[1..20]</pre>"
            ],
            "flags": 0,
            "guid": "sO1OvM|WyV",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you specify a step using ranges?",
                "Taking the first two elements and then specifying the upper limit, e.g. <pre>[2,4..20]</pre>"
            ],
            "flags": 0,
            "guid": "fkjxy:AC~G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you get a list of 20 to 1 using ranges?",
                "<pre>[20,19..1]</pre>"
            ],
            "flags": 0,
            "guid": "K[|uIIf1|5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why can you do <pre>take 24 [13,26‚Ä¶]</pre> without errors or waiting forever?",
                "Because Haskell is lazy and won‚Äôt try to evaluate anything it won‚Äôt use"
            ],
            "flags": 0,
            "guid": "pO1c67cGy(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <pre>cycle</pre> function do?",
                "Takes a list and cycles it into an infinite list."
            ],
            "flags": 0,
            "guid": "Qe=,)pI*Qc",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is <pre>[x*2 | x <- [1..10]]</pre>?",
                "A list comprehension taking the first 10 even numbers"
            ],
            "flags": 0,
            "guid": "cz}aj;x!3(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "With the list comprehension <pre>[x*2 | <-  [1..10]]</pre>, how do we add a predicate so that we only take even numbers above or equal to 12?",
                "<pre>[x*2 | x <- [1..10], x*2 >= 12]</pre>"
            ],
            "flags": 0,
            "guid": "H1a4_Az|#N",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is another name for weeding out lists by predicates?",
                "Filtering"
            ],
            "flags": 0,
            "guid": "g)eEoVqba2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the following list comprehension do? <pre>boomBangs xs = [ if x < 10 then \"BOOM!\" else \"BANG!\" | x <- xs, odd x]</pre>",
                "For each odd number less than 10 it replaces the number with ‚ÄúBOOM!‚Äù, for each number greater than or equal to 10 the number is replaced with ‚ÄúBANG!‚Äù."
            ],
            "flags": 0,
            "guid": "M`qExYK?_t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the following function do? <pre>func xs = sum [1 | _ <- xs]</pre>",
                "Calculates the length of a list"
            ],
            "flags": 0,
            "guid": "j9>[fxfjxl",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are tuples homogenous?",
                "No, they can contain a combination of several types."
            ],
            "flags": 0,
            "guid": "e=!h5F*eYt",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <pre>fst</pre> and <pre>snd</pre> functions do?",
                "<pre>fst</pre> takes the first component of a pair, <pre>snd</pre> takes the second component of a pair."
            ],
            "flags": 0,
            "guid": "rOMi+7(*Xx",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <pre>zip</pre> function do?",
                "Takes two lists and then zips them together into one list by joining the matching elements into pairs. <br> E.g.: <pre>zip [1..5] [‚Äúone‚Äù, ‚Äútwo‚Äù, ‚Äúthree‚Äù, ‚Äúfour‚Äù, ‚Äúfive‚Äù]</pre> <br/> <pre>[(1,\"one\"),(2,\"two\"),(3,\"three\"),(4,\"four\"),(5,\"five\")]</pre>"
            ],
            "flags": 0,
            "guid": "b#z*HyNa)]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When using the <pre>zip</pre> function, what happens if the length of the lists don‚Äôt match?",
                "The longer list gets cut short."
            ],
            "flags": 0,
            "guid": "pJ.I5hj7~q",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does Haskell have a static or dynamic type system?",
                "Static"
            ],
            "flags": 0,
            "guid": "zCn;~V#l^M",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What would the type declaration for the following function be? <pre>removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]</pre>",
                "<pre>removeNonUppercase :: [Char] -> [Char]</pre>"
            ],
            "flags": 0,
            "guid": "pYq|COZ_^)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between [Char] and String?",
                "They‚Äôre synonymous"
            ],
            "flags": 0,
            "guid": "t[ES&W`jMx",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a type variable?",
                "A variable which can be of any type. Much like generics in other languages."
            ],
            "flags": 0,
            "guid": "qAlZmZ=N><",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are functions that use type variables called?",
                "Polymorphic functions."
            ],
            "flags": 0,
            "guid": "e{tN>v63@G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean if a type is a member of the <pre>Eq</pre> class?",
                "It can be equated"
            ],
            "flags": 0,
            "guid": "C#-&el-!u?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean that functions in Haskell are curried?",
                "Functions in Haskell actually only take one parameter. This means that when a function uses more than one parameter, it basically creates a new function for each argument that takes a new argument."
            ],
            "flags": 0,
            "guid": "o9ArU<QiV@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do we indicate that we want a function as a parameter in the type declaration?",
                "We use parantheses. E.g. \n<pre>\napplyTwice :: (a -> a) -> a -> a   \napplyTwice f x = f (f x) \n</pre>"
            ],
            "flags": 0,
            "guid": "eS7Ext}rl?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a module?",
                "A collection of related functions, types and typeclasses."
            ],
            "flags": 0,
            "guid": "N+XJ^zUF9)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the syntax for importing modules?",
                "<pre>import <module name>"
            ],
            "flags": 0,
            "guid": "Ai]ij9,jYI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If we want to import only the <i>nub</i> and <i>sort</i> functions from Data.List, how would we do that?",
                "<pre>import Data.List (nub, sort)</pre>"
            ],
            "flags": 0,
            "guid": "f}Or?UUw,c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If we want to import all functions except <i>nub</i> from Data.List, how would we do that?",
                "<pre>import Data.List hiding (nub)</pre>"
            ],
            "flags": 0,
            "guid": "F-&1tOAZ=4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <pre>\\\\</pre> function do?",
                "It is the difference function, it acts like a set difference, basically."
            ],
            "flags": 0,
            "guid": "xr){&kQo>1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do we define a module named Geometry?",
                "<pre>module Geometry (\nFunc1\n, func2\n, func3\n) where\n\nFunc1\nFunc2\nFunc3"
            ],
            "flags": 0,
            "guid": "Nsym3&Yt<@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do we make a data type?",
                "<pre>data Type = Value1 | Value2 | ‚Ä¶ | ValueN</pre>"
            ],
            "flags": 0,
            "guid": "xx5oAEcH%s",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When writing data types, how do we give names to data? ",
                "<i>name :: Type </i> e.g. <pre>\ndata Person = Person {firstName :: String\n, lastName :: String\n, age :: Int\n, phoneNumber :: String\n, flavor :: String\n} </pre>"
            ],
            "flags": 0,
            "guid": "K%R0+oWL1B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::haskell"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Just In Time compilation? (JIT)",
                "Compilation during runtime. Combines the speed of compiled code with the flexibility of interpretation."
            ],
            "flags": 0,
            "guid": "r(kAlWqq|^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::PLMisc",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the downside of JIT?&nbsp;",
                "There is a delay in the initial execution"
            ],
            "flags": 0,
            "guid": "C*qF8j!ItW",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::PLMisc",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Static Analysis?&nbsp;",
                "Analysis of the source code without executing the program"
            ],
            "flags": 0,
            "guid": "Btw)&6`CVA",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a function computable?&nbsp;",
                "When there exists a program which computes it.&nbsp;"
            ],
            "flags": 0,
            "guid": "M]|1YiZ.EG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which is used more in practice, compilation or interpretation?&nbsp;",
                "A combination of both."
            ],
            "flags": 0,
            "guid": "PBzRMLG{%;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is partial evaluation?&nbsp;",
                "A partial evaluator is like a across between an interpreter and a compiler. The partial evaluator will take input and only evaluate the parts of the program the depend on those inputs.&nbsp;"
            ],
            "flags": 0,
            "guid": "Q3H[%L#RrH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an interpreter?&nbsp;",
                "Program that interprets instructions. Fetch-decode-execute. When a language is interpreted, the program runs from the interpreter.&nbsp;"
            ],
            "flags": 0,
            "guid": "sqaKLYU3s#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a compiler and an interpreter?&nbsp;",
                "A compiler is faster, but less flexible, and an interpreter is slower but more flexible. Compilers will not compile if there is an error in the code, while an interpreter will stop if there is a code. Interpreters also don't generate executables"
            ],
            "flags": 0,
            "guid": "h_^Av]9v*.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How does a partial evaluator work?&nbsp;",
                "It reads some source code, then builds an abstract syntax tree from which it reads some of the inputs to the program and analyses the program to see when the inputs provided are used in the program.&nbsp;"
            ],
            "flags": 0,
            "guid": "tPibE,E9T4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an abstract machine?&nbsp;",
                "An abstract machine is a set of data structures and algorithms that can store and run programs. An abstraction of a physical computer.&nbsp;"
            ],
            "flags": 0,
            "guid": "w5jwC1P1Yh",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the name of the technique that consists of evaluating a program against an input to produce a program that is more efficient than the original",
                "Partial Evaluation"
            ],
            "flags": 0,
            "guid": "eOgPlE9>HP",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a compiler?&nbsp;",
                "A compiler is a program that is used for translation to target machine code. A compiler directly translates to the machine code and generates an intermediate file, which acts as an executable that you can run.&nbsp;"
            ],
            "flags": 0,
            "guid": "ok61?m![xo",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the first step of an interpreter‚Äôs execution cycle?",
                "Fetching the next instruction to execute from memory"
            ],
            "flags": 0,
            "guid": "B4Bu>BSvW.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When were low-level languages used to program the first computers?",
                "1940s"
            ],
            "flags": 0,
            "guid": "u}4wiz5ft)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the program that translates assembly to machine code called? ",
                "Assembler"
            ],
            "flags": 0,
            "guid": "nBRG#83C}w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is OpCode?",
                "A unique code which identifies one of the primitive operations defined by the machine‚Äôs hardware"
            ],
            "flags": 0,
            "guid": "ye-[Vv4YUz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The operations for processing primitive data are implemented by what?",
                "ALU (Arithmetic-logic unit)"
            ],
            "flags": 0,
            "guid": "Q,p8I?Ug)-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the most famous computer on which microprogramming was used? ",
                "IBM 360"
            ],
            "flags": 0,
            "guid": "wkbn+(h|_D",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the term used for simulation using microprogramming?",
                "Emulation"
            ],
            "flags": 0,
            "guid": "icb,G{}V*1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In real language implementations, is compilation or interpreation usually used?",
                "Both elements are almost always present."
            ],
            "flags": 0,
            "guid": "L#33:g~Z{w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What kind of machine is the Java Virtual Machine and its bytecode language an example of?",
                "An intermediate machine"
            ],
            "flags": 0,
            "guid": "Rb!M0#(`qQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens in the <b>Design of Language </b>stage?",
                "Bindings between primitive constants, types and operations of the language are defined (for example, + indicates addition, and int denotes the type of integers etc.)"
            ],
            "flags": 0,
            "guid": "QWe78_n$KT",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does there exist programs which are not computable?&nbsp;",
                "The undecidability of the halting problem assures us that there exist functions which are not computable."
            ],
            "flags": 0,
            "guid": "f2.@I3kq`G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How can a program take another program as an input and determine if it terminates?&nbsp;",
                "It can't."
            ],
            "flags": 0,
            "guid": "e7|HhnD)PJ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the halting problem?&nbsp;",
                "The halting problem is a problem which states that no program can be written to predict whether or not any other program halts after a finite number of steps."
            ],
            "flags": 0,
            "guid": "J04,!w[Eu)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Where is a declaration local to a block visible?</p>",
                "<p>That block and all the blocks nested within it</p>"
            ],
            "flags": 0,
            "guid": "MwnXMpSC*G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does the environment change?&nbsp;",
                "On the entry and exit of a block."
            ],
            "flags": 0,
            "guid": "fJKMQEN~|)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are Denotable Objects?&nbsp;",
                "Objects to which a name can be given.<div>Here is a non-exhaustive list:&nbsp;</div><div><br><ul><li>Objects whose names are defined by the user: Variables, formal parameters, procedures, user-defined types, labels, modules, user-defined constants, exceptions</li><li>Objects whose names are defined by the programming language: primitive types, primitive operations, predefined constants</li></ul></div>"
            ],
            "flags": 0,
            "guid": "GsFM~Kf->$",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>When are changes in the environment produced?</p>",
                "<p>At entry and exit from a block</p>"
            ],
            "flags": 0,
            "guid": "mrD%]O0GfN",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which programming languages are turing complete (meaning they can compute the same set of functions as those computed by a Turing Machine)?",
                "Every general purpose programming language"
            ],
            "flags": 0,
            "guid": "f$sC~2nY:R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Take the following example: (c-like)<div>{</div><div>&nbsp; &nbsp; int a = 2;&nbsp;</div><div>&nbsp; &nbsp; {...}</div><div>}</div><div>To who is <i>a</i>&nbsp;visible?&nbsp;</div>",
                "The block it has been declared in, as well as all blocks listed within it, unless there is a new declaration of the same name in that same block.&nbsp;"
            ],
            "flags": 0,
            "guid": "D>.keg{,:[",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If we have a variable, <i>integer a = 10</i>, do we know whether the name and the object are the same?&nbsp;",
                "The name and the object they denote are never the same. No matter if it's a function or a variable or anything else.&nbsp;"
            ],
            "flags": 0,
            "guid": "P<&2N$-{/`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is the difference between static and lexical scope?</p>",
                "<p>They are two words for the same thing</p>"
            ],
            "flags": 0,
            "guid": "n(-F/dTV54",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are names?&nbsp;",
                "Sequence of characters used to denote something. E.g.&nbsp;<div>int name = 2</div><div>const pi = 3.14&nbsp;</div>"
            ],
            "flags": 0,
            "guid": "v5G4OXS6v+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Which functionality manages the allocation of memory for programs and for data?</p>",
                "<p>Interpreter</p>"
            ],
            "flags": 0,
            "guid": "H*4,}t+O0[",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>A stack uses which scheme, LIFO, FIFO or FILO?</p>",
                "<p>LIFO</p>"
            ],
            "flags": 0,
            "guid": "t9OZuQAs2W",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is the difference in an activation record for a procedure and for a function?</p>",
                "<p>For functions the activation record must also keep tabs on the memory location in which the function stores its return value.</p>"
            ],
            "flags": 0,
            "guid": "l_@=3q_+x!",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>A block A is entered, then a block B is entered, with the LIFO scheme, which block do we leave first?</p>",
                "<p>B</p>"
            ],
            "flags": 0,
            "guid": "Hw$Sj9V4E5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is the LIFO scheme?</p>",
                "<p>Last in first out.</p>"
            ],
            "flags": 0,
            "guid": "HTh)/hF4$_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Is memory management a function of a compiler or interpreter associated with an abstract machine?</p>",
                "<p>Interpreter</p>"
            ],
            "flags": 0,
            "guid": "DAh63Hq2>f",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>When is static memory management performed and by what?</p>",
                "Performed by the compiler before the exeuction starts."
            ],
            "flags": 0,
            "guid": "h!]pO$.Nx0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>How is the runtime management of the system stack implemented?</p>",
                "<p>By code fragments which the compiler or interpreter inserts immediately before and after the call to a procedure or before the start and after the end of a block</p>"
            ],
            "flags": 0,
            "guid": "n[b_!<7Ck*",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is the memory space allocated on the stack, dedicated to an in-line block or to an activation of a procedure called?</p>",
                "<p>The activation record or frame.</p>"
            ],
            "flags": 0,
            "guid": "xWgAsTM65n",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What does the structure of a generic activation record for an in-line block hold?</p>",
                "<p>Dynamic chain pointer, local variables and intermediate results</p>"
            ],
            "flags": 0,
            "guid": "gTB9g6Jo{F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What are intermediate results in an in-line block of an activation record?</p>",
                "<p>Results which are only needed for something else. For example b = (a + x) / (x + y), a+x and x+y will be calculated and stored before they are divided (depending on the compiler).</p>"
            ],
            "flags": 0,
            "guid": "b9@^!O:`{f",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is a procedure?</p>",
                "<p>An independent code module that fulfils some concrete task and is referenced within a larger body of source code</p>"
            ],
            "flags": 0,
            "guid": "fyH06kVpT%",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Where does statically allocated memory objects reside?</p>",
                "<p>In a fixed zone of memory which is determined by the compiler, <strong>and they remain there for the entire duration of the program's execution.</strong></p>"
            ],
            "flags": 0,
            "guid": "qD(n~jq||,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Are <em>constants, object code and global variables</em> usually statically or dynamically allocated?</p>",
                "<p>Statically</p>"
            ],
            "flags": 0,
            "guid": "MCpjP/qbyw",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What does the dynamic chain pointer store? (recall: in-line block of a generic activation record)</p>",
                "<p>A pointer to the previous activation record on the stack (or to the last activation record created).</p>"
            ],
            "flags": 0,
            "guid": "y*zoMgn_7>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What does it mean that we are using a stack for memory purposes?</p>",
                "<p>We use them to push activation records or frames.</p>"
            ],
            "flags": 0,
            "guid": "d(sgi<^BWa",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Why do we need memory?</p>",
                "<p>To store the state of the program</p>"
            ],
            "flags": 0,
            "guid": "Dc_FXvXeF`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Why do we need a stack for dynamic memory, instead of just dumping everything in memory?</p>",
                "<p>We need it for recursion. With recursion we cannot allocate all possible blocks, but we can with a stack.</p>"
            ],
            "flags": 0,
            "guid": "ebT8z5&03@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>How do we implement static scoping?</p>",
                "<p>We are using the static chain pointer. The compiler adds this pointer to the previous \"father\" block, which contains the known local variable.</p>"
            ],
            "flags": 0,
            "guid": "o2IfS+(fK|",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is an expression?</p>",
                "<p>A syntactic entity whose evaluation yields a value or does not end, in which case the expression is undefined. There are three main notations, infix, prefix and postfix.</p>"
            ],
            "flags": 0,
            "guid": "fK.}{BxeiW",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What are side effects?</p>",
                "<p>Changing the state of computation without returning a value</p>"
            ],
            "flags": 0,
            "guid": "N+^H(RU^x{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>When was if then else introduced?</p>",
                "<p>In ALGOL 60</p>"
            ],
            "flags": 0,
            "guid": "N(|zBpUv8d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Why do we not use goto anymore?</p>",
                "<p>It makes the code harder to read</p>"
            ],
            "flags": 0,
            "guid": "gV,DWiLw3B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What kinds of data structures are we using in memory management ?</p>",
                "<p>Stack and the heap</p>"
            ],
            "flags": 0,
            "guid": "xcgQSj>F4R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is call by result?</p>",
                "<p>Opposite of value. The value of the result is returned and modified, but is not a reference. foo(result y) {y + 1}, then y would be y + 1 from here on.</p>"
            ],
            "flags": 0,
            "guid": "xp,^^YRsu;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Why do we care about tail recursion?</p>",
                "<p>It's faster</p>"
            ],
            "flags": 0,
            "guid": "DhIz*:N2M}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What happens to the variable inside of a function using call by result after the function is done running?</p>",
                "<p>It is destroyed (removed from the stack)</p>"
            ],
            "flags": 0,
            "guid": "HW3uWc;KrQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Why do we care about expressions?</p>",
                "<p>Because we want to compute stuff</p>"
            ],
            "flags": 0,
            "guid": "fn%_wEb)1:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What are the two main ways that parameters are passed?</p>",
                "<p>By value and by reference</p>"
            ],
            "flags": 0,
            "guid": "PS3YLngzGA",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>You can call by value and by reference, but what else?</p>",
                "<p>Constant, Result, name and value-result</p>"
            ],
            "flags": 0,
            "guid": "t)X;wr,<sE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Can you do lazy evaluation if you evaluate right-to-left?</p>",
                "<p>No</p>"
            ],
            "flags": 0,
            "guid": "fx?@B?p<}j",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is type equivalence by name?</p>",
                "<p>Two types are equivalent if they have the same name. Used in Pascal, Ada and Java</p>"
            ],
            "flags": 0,
            "guid": "^z%]d;xC]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p><em>Type LessThan = 0..9</em> is an example of which type?</p>",
                "<p>Intervals</p>"
            ],
            "flags": 0,
            "guid": "t}Q]l01s]c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is a data type?</p>",
                "<p>A collection of values (homogeneous and effectively represented (can be visualized)) equipped with a set of operations to manipulate these values.</p>"
            ],
            "flags": 0,
            "guid": "Pz:$W0kfI{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What defines what is a type and what is not a type?</p>",
                "<p>The programming language.</p>"
            ],
            "flags": 0,
            "guid": "IOwI?/=Rmb",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>When were enumerations introduced?</p>",
                "<p>In Pascal</p>"
            ],
            "flags": 0,
            "guid": "P`oAr!de-:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is a scalar type?</p>",
                "<p>A type where values are not composed of aggregations of other values (e.g. boolean, chars).</p>"
            ],
            "flags": 0,
            "guid": "FW%1:^1(/}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What are the pros of call by value?</p>",
                "<p>You don't have to worry about side-effects.</p>"
            ],
            "flags": 0,
            "guid": "q;JDH67ctp",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>How many categories of types are there?</p>",
                "<p>Two, scalar types (or simple types) and composite types.</p>"
            ],
            "flags": 0,
            "guid": "y;;awQ0W$H",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>When are two types equivalent?</p>",
                "<p>If each object of type T1 is also an object of type T2 and vice versa. T1 is compatible with T2 if an object of T1 can appear where a T2 would be expected.</p>"
            ],
            "flags": 0,
            "guid": "dmadz[/TsP",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>When were intervals (subranges) introduced?</p>",
                "<p>In Pascal</p>"
            ],
            "flags": 0,
            "guid": "tKu>S7Y1N]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is the particularity of call by constant?</p>",
                "<p>It's read only. The implementation depends on the compiler, it can be like passing by value or reference</p>"
            ],
            "flags": 0,
            "guid": "k=]lM9S-7#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>How many ways of passing parameters are there?</p>",
                "<p>6, Call by value, reference, result, result-value, constant and name</p>"
            ],
            "flags": 0,
            "guid": "H<NP|G`V{H",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What are composite types?</p>",
                "<p>Types obtained by combining other types with appropriate constructors (e.g. string, pointer, struct).</p>"
            ],
            "flags": 0,
            "guid": "lNJH^2fBV/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What are the pros of call by reference?</p>",
                "<p>You don't have to copy anything</p>"
            ],
            "flags": 0,
            "guid": "Fg6cBhSKFJ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Are enumerations ordered or unordered?</p>",
                "<p>Ordered</p>"
            ],
            "flags": 0,
            "guid": "s~d2Xi[fXh",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is the difference between an exception and an error?</p>",
                "<p>An Error \"indicates serious problems that a reasonable application should not try to catch.\" An Exception \"indicates conditions that a reasonable application might want to catch.\"</p>"
            ],
            "flags": 0,
            "guid": "LvIgk)[_vC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>What is the idea of <em>finally</em>?</p>",
                "<p>To have a block that will be executed no matter what in a try block.</p>"
            ],
            "flags": 0,
            "guid": "PS1h8>Fkk1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the first high-level programming language designed for computers? (Not implemented)",
                "Plankalk√ºl (Plan Calculus) in 1942-1945 by Konrad Zuse"
            ],
            "flags": 0,
            "guid": "vup-wjEFX>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which programming language introduced the use of <i>blocks</i>?",
                "Algol60"
            ],
            "flags": 0,
            "guid": "oi2g)v.Er>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is lisp significant?&nbsp;",
                "It was the first functional programming language, as well as the only programming language for artificial intelligence for years.&nbsp;"
            ],
            "flags": 0,
            "guid": "K-JJetuV;u",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which was the first <b>effectively implemented </b>high-level programming language?&nbsp;",
                "Fortran in 1956"
            ],
            "flags": 0,
            "guid": "g2u?h?$OZ(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the first programming language?&nbsp;",
                "Fortran"
            ],
            "flags": 0,
            "guid": "EkM#z>|}ER",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When did Charles Babbage invent the Analytical Engine?&nbsp;",
                "1837"
            ],
            "flags": 0,
            "guid": "x6ai]ik79^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are Lisps sucessors?&nbsp;",
                "Miranda, ML, Haskell"
            ],
            "flags": 0,
            "guid": "kV4*Pquyrg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is (was) the use-case of cobol?&nbsp;",
                "Business-oriented computations. It has a very strict program organization and poor control structures.&nbsp;"
            ],
            "flags": 0,
            "guid": "m<&Um2=8JI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who invented the Analytical Engine?&nbsp;",
                "Charles Babbage"
            ],
            "flags": 0,
            "guid": "j}R_QC.`XQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What programming style (Imperative, Functional, Declarative, Functional Logic) is Prolog?&nbsp;",
                "Declarative"
            ],
            "flags": 0,
            "guid": "qb<Otz{f=:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Java originally designed for?&nbsp;",
                "Internet programming, but is a general-purpose language.&nbsp;"
            ],
            "flags": 0,
            "guid": "F|vXWC~mbq",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What did fortran introduce?",
                "<ul>\n<li> Variables</li><li>Loops</li><li>Procedures</li><li>Statement labels</li><li>Much more</li>\n</ul>"
            ],
            "flags": 0,
            "guid": "jCQu(G],B!",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Where would Fortran still be used?&nbsp;",
                "In engineering applications that require much array manipulation"
            ],
            "flags": 0,
            "guid": "O1,kiPfomf",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is significant about <b>basic</b>?",
                "It's the first programming language for personal computers.&nbsp;<div>It's also designed to be easy to learn (however not anymore).</div>"
            ],
            "flags": 0,
            "guid": "y1PV3lkB4p",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What did Simula 67 introduce?&nbsp;",
                "<b>Object Orientation: </b>classes and encapsulation"
            ],
            "flags": 0,
            "guid": "m_22H>vv<?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the predecessor of Smalltalk and C++?&nbsp;",
                "Simula 67"
            ],
            "flags": 0,
            "guid": "x%eFD~^7G,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Pascal (1970) a sucessor to?&nbsp;",
                "Algol60. It is conceptually simplified and cleaned up"
            ],
            "flags": 0,
            "guid": "ej}1peF0Ek",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the first functional programming language?&nbsp;",
                "Lisp (1958)"
            ],
            "flags": 0,
            "guid": "C8/ohCLb*U",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is significant about Prolog (1972)?",
                "It has an important role in Artificial Intelligence.&nbsp;<br>It is intended primarily as a declarative programming language.<div>Logic is expressed as relations</div>"
            ],
            "flags": 0,
            "guid": "tF7pBMF?;T",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What connection does Simula 67 have to Algol 60?",
                "It's an extension of Algol 60 designed for concurrent processes&nbsp;"
            ],
            "flags": 0,
            "guid": "l?*{U]4Lu;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between C (1972) and C++ (1980)?&nbsp;",
                "C++ is an <i>object-oriented</i>&nbsp;extension of the imperative language <i>C. </i>Designed in 1980."
            ],
            "flags": 0,
            "guid": "ND9LD-W2Mj",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What did algol60 introduce?",
                "<ul>\n<li>Block Structure</li><li>Recursion</li><li>a <i>formal definition</i></li>\n</ul>"
            ],
            "flags": 0,
            "guid": "uvXa>JsjH/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is cobol still used?&nbsp;",
                "For maintenance of legacy business applications.&nbsp;"
            ],
            "flags": 0,
            "guid": "MD{qv,Mhk3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is <i>the fundamental cycle?&nbsp;</i>",
                "Fetch-decode-execute"
            ],
            "flags": 0,
            "guid": "QOC~Xi>H@S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLMisc",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the part of the description of the language which seeks to answer the question of what does a correct phrase mean?",
                "Semantics"
            ],
            "flags": 0,
            "guid": "d@^+yPA.>;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the part of a language description which asks itself ‚Äúhow do we use a meaningful sentence?‚Äù",
                "Pragmatics"
            ],
            "flags": 0,
            "guid": "dY=PLY#VSp",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who developed techniques to describe syntactic phenomena in a formal manner?",
                "Noam Chomsky"
            ],
            "flags": 0,
            "guid": "tCv%Vyrfae",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a fundamental device for the description of programming languages?",
                "context-free grammar"
            ],
            "flags": 0,
            "guid": "ilP%Evl0p",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the aim of lexical analysis?",
                "to read the symbols (characters) forming the program sequentially from the input (and generate any errors if needed)"
            ],
            "flags": 0,
            "guid": "p)0~:&u65b",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a very simple operation that scans the input text of the source program from left to right?",
                "Lexical analysis"
            ],
            "flags": 0,
            "guid": "MtkRrCLut7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do most official programming language definitions use for their semantic description?",
                "natural language"
            ],
            "flags": 0,
            "guid": "q(HNq|hFB4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Semantics is a relation between what?",
                "signs (correct sentences) and meanings"
            ],
            "flags": 0,
            "guid": "I4a>t0hsd3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What determines the correct sentences with which a recipe is expressed?",
                "The syntax"
            ],
            "flags": 0,
            "guid": "C.MP/vuoL<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What does Chomsky use to limit the ambiguity that is always present in language?",
                "formalisms"
            ],
            "flags": 0,
            "guid": "J),`FPD9Ul",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is a fundamental tool for describing the syntax of programming languages?",
                "generative grammar"
            ],
            "flags": 0,
            "guid": "i$]@#.3@PG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are Context-Free Grammars?",
                "a notation for the concise and precise expression of recursive definitions of strings"
            ],
            "flags": 0,
            "guid": "e|jMzA44kS",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " In the context of programming languages, context-free grammars were used for the first time in the definition of what language?",
                "Algol60"
            ],
            "flags": 0,
            "guid": "csQpmZ:xHR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is BNF?",
                "Backus Naur normal form"
            ],
            "flags": 0,
            "guid": "s|!}2:y~[~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is a derivation tree ordered or unordered?",
                "Ordered"
            ],
            "flags": 0,
            "guid": "K2p|D2yNH2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are nodes without children?",
                "leaves"
            ],
            "flags": 0,
            "guid": "lFj:Gi,3U]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Who introduced the Turing Machine language in the 1930s?",
                "Alan M. Turing"
            ],
            "flags": 0,
            "guid": "uZg5=6R<s(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is a Turing machine composed of?",
                "an infinite tape"
            ],
            "flags": 0,
            "guid": "e[}zNL04Db",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Alonzo Church proposed a principle in the mid-1930s that states exactly what?",
                "It states that a function on the natural numbers can be calculated by an effective method if and only if it is computable by a Turing machine. This is known as the church thesis."
            ],
            "flags": 0,
            "guid": "oIXl*Af!=:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a program that can determine whether a program can generate a division by zero error during execution?",
                "a static analyser"
            ],
            "flags": 0,
            "guid": "vW;wE((]q;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the name of the machine that computes every intuitively computable function?",
                "Turing Machine"
            ],
            "flags": 0,
            "guid": "M7SY40#.W*",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Church's Thesis is a philosophical principle that the computer science community assumes that it will not be discredited by what new computational paradigm?",
                "quantum computing"
            ],
            "flags": 0,
            "guid": "B6WDrpP*G5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter03",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is nothing more than a sequence of characters used to represent, or denote another object?",
                "A name"
            ],
            "flags": 0,
            "guid": "qRufkF+^YH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " When we define a name using a variable, we introduce a symbolic identifier for what?",
                "a memory location"
            ],
            "flags": 0,
            "guid": "o;(n)g8caL",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If we define a variable <i>fie</i> and assign it the value of 2, where weill the value be stored?",
                "the location reserved for the variable named fie"
            ],
            "flags": 0,
            "guid": "D1C>c?iLMp",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why do we use names/what does the use of names avoid?",
                "The need to bother with whatever the location is"
            ],
            "flags": 0,
            "guid": "P%.:bBi?4w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " How must the correspondence between name and memory location be guaranteed?",
                "by the implementation"
            ],
            "flags": 0,
            "guid": "yyex^}GO]@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is the part of the implementation responsible for the associations between names and objects that they denote?",
                "The environment"
            ],
            "flags": 0,
            "guid": "uLM9%EV]%p",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is the component of the abstract machine that allows the determination of what the correct association is?",
                "environment"
            ],
            "flags": 0,
            "guid": "HS*=C;Dh1)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does the environment exist at the level of the physical machine?",
                "No"
            ],
            "flags": 0,
            "guid": "y6s|-0_}^$",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is a structuring method for programs introduced by ALGOL60?",
                "blocks"
            ],
            "flags": 0,
            "guid": "L>]m0-`W(X",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are the start- and end-block constructs for languages in the ALGOL family?",
                "begin ... end"
            ],
            "flags": 0,
            "guid": "w2EI:XCRjJ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are the start- and end-block constructs for Java?",
                "{‚Ä¶}"
            ],
            "flags": 0,
            "guid": "PiW-O(0.ty",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " A block's environment is composed of associations between names declared locally to what?",
                "the block itself"
            ],
            "flags": 0,
            "guid": "jdHy~qmb*L",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " In most languages allowing blocks, what can be nested?",
                "blocks"
            ],
            "flags": 0,
            "guid": "xTg&$*Hq3?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " How can blocks be nested?",
                "In most languages allowing blocks, blocks can be nested; that is, the definition of one block can be wholly included in that of another"
            ],
            "flags": 0,
            "guid": "qA2l}}B9T{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What does the new declaration hide in the block that contains the redefinition?",
                "the previous one"
            ],
            "flags": 0,
            "guid": "GXh=v}]`fW",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " When will the association of a variable from a block be reactivated?",
                "on exit from the inner block"
            ],
            "flags": 0,
            "guid": "IEJI5:J,:`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are visibility rules also called?",
                "scope rules"
            ],
            "flags": 0,
            "guid": "zo#t6?$=o,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "‚ÄúThe rule of nearest nested scope‚Äù is a term used to describe which scope rule?",
                "Static scope"
            ],
            "flags": 0,
            "guid": "qc(o|!?u{2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " When was the static scope rule introduced?",
                "ALGOL60"
            ],
            "flags": 0,
            "guid": "lk#F+_>A+g",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What type of scope rule is typically used by the most important programming languages?",
                "Static Scope"
            ],
            "flags": 0,
            "guid": "B1lsO}A_o7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is the scope rule that is easiest to implement?",
                "Dynamic Scope"
            ],
            "flags": 0,
            "guid": "KyKJf--vC@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a name?",
                "a (possibly meaningful) sequence of characters used to represent some other thing"
            ],
            "flags": 0,
            "guid": "DW=$:668k@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What term denotes the entire period of time between starting and termination of a program?",
                "Runtime"
            ],
            "flags": 0,
            "guid": "coU<<4$Dm@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the environment formed from associations created when the program's execution began?",
                "Global environment"
            ],
            "flags": 0,
            "guid": "C!p&]f.WmQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when a block is exited?",
                "associations for names declared locally to the block and the objects they denote are destroyed"
            ],
            "flags": 0,
            "guid": "rB=Fo=S#2x",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a situation in which an object is possible to access an object whose memory has been reallocated?",
                "a dangling reference"
            ],
            "flags": 0,
            "guid": "gNpX]CKQt.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are some elements for which it is possible to allocate memory statically?",
                "global variables"
            ],
            "flags": 0,
            "guid": "I^$7JzW*F]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does a language with only static memory allocation support recursion?",
                "No"
            ],
            "flags": 0,
            "guid": "sM8FwDi4N?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What did the first versions of FORTRAN use, static or dynamic memory allocation?",
                "static memory allocation"
            ],
            "flags": 0,
            "guid": "ON,UM$,6+l",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Intermediate results, local variables, and dynamic chain pointer are fields of what?",
                "activation record"
            ],
            "flags": 0,
            "guid": "ws@zY~W_d^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What does a function return when it terminates its execution?",
                "a value to the caller"
            ],
            "flags": 0,
            "guid": "de>Q8XKqwR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Activation records are stored on and removed from the stack at what time?",
                "runtime"
            ],
            "flags": 0,
            "guid": "sFMP0vA6@B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What do we use to indicate the program or procedure that performs a call and the procedure that has been called?",
                "caller\" and \"callee\""
            ],
            "flags": 0,
            "guid": "mW3cTJJ!9c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is the definition of a heap that we use here (in memory) has nothing to do with this data structure?",
                "a heap is simply an area of memory in which blocks of memory can be allocated and deallocated relatively freely"
            ],
            "flags": 0,
            "guid": "eQ0+=4Tk]L",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What happens when a block of size strictly larger than the requested by the program is allocated?",
                "internal fragmentation"
            ],
            "flags": 0,
            "guid": "bH{WKAT05h",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What type of management is a Heap?",
                "Dynamic Management"
            ],
            "flags": 0,
            "guid": "nsb!9Lv8.j",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " When did the first electronic computers appear?",
                "second half of the 1940s"
            ],
            "flags": 0,
            "guid": "ec0QL#th6J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Data and program were initially represented on what type of cards?",
                "punched cards"
            ],
            "flags": 0,
            "guid": "c>upbMk~h",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the first programming language that introduced expressions such as a * 2 + b¬†?",
                "Fortran"
            ],
            "flags": 0,
            "guid": "t<y~Rp[COX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How many kinds of environments are there?",
                "Two, local and global"
            ],
            "flags": 0,
            "guid": "KiaSmDe~h&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does ALGOL stand for?",
                "ALGOrithmic language"
            ],
            "flags": 0,
            "guid": "L9M{x9gJZ/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When were imperative languages introduced?",
                "In the end of the 1950s"
            ],
            "flags": 0,
            "guid": "y:VRsoG#Ih",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are context-free grammars now known as?",
                "Backus Naur Form or BNF"
            ],
            "flags": 0,
            "guid": "wUt72(8+;|",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is the acronym for COmmon Business Oriented Language?",
                "COBOL"
            ],
            "flags": 0,
            "guid": "tRPLvIflqs",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What was the goal of the COBOL language?",
                "producing a language that was specific to commercial applications and whose syntax was as close as possible to the English language"
            ],
            "flags": 0,
            "guid": "I[a+Ra9^=_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What was the first language to introduce the concepts of class, object, subtype and dynamic method dispatch?",
                "Simula67"
            ],
            "flags": 0,
            "guid": "o%+ToZ]|+Y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What language did the Pascal compiler translate into?",
                "P-code"
            ],
            "flags": 0,
            "guid": "fb/r;sGOiB",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What was the first commercial PC?",
                "Apple II in 1978"
            ],
            "flags": 0,
            "guid": "mY[#ew`klC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Java uses what type of scope?",
                "static"
            ],
            "flags": 0,
            "guid": "Q9T.O>e~Dy",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Java allows the dynamic loading of what?",
                "classes"
            ],
            "flags": 0,
            "guid": "zhq2XR>I?&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter13",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is the essential characteristic of an expression that differentiates it from a command?",
                "its evaluation produces a value"
            ],
            "flags": 0,
            "guid": "B[BVtnM~-D",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " How can expression syntax be precisely described?",
                "by a context-free grammar"
            ],
            "flags": 0,
            "guid": "Kg0mS)6FA<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What can be used to represent an expression internally inside a computer?",
                "Tree structures"
            ],
            "flags": 0,
            "guid": "qCv1pN%&ZG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " How many main types of notation can we distinguish?",
                "three: infix, postfix, prefix"
            ],
            "flags": 0,
            "guid": "s;.,e!V0EM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is another name for Postfix Notation?",
                "Reverse Polish"
            ],
            "flags": 0,
            "guid": "KDhoM7BKu/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " In imperative programming languages, expression evaluation is what?",
                "side effects"
            ],
            "flags": 0,
            "guid": "bmGwsE/D42",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are the two classes declarative languages are usually divided into?",
                "functional and logic programming languages"
            ],
            "flags": 0,
            "guid": "uz=o^$4OZ/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is another name for short-circuit evaluation?",
                "lazy evaluation"
            ],
            "flags": 0,
            "guid": "DmlH07{mVA",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " If the result type of a function is void, what does the function return?",
                "no meaningful value"
            ],
            "flags": 0,
            "guid": "B!M(986-:~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "C and Java only allow one passing mechanism, which one? ",
                "Passing by value"
            ],
            "flags": 0,
            "guid": "rdi3dJ-P$X",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between formal parameters and actual parameters?",
                "Formal parameters appear in the definition of a function, actual parameters appear in the call."
            ],
            "flags": 0,
            "guid": "s.nA/kTbZ-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a parameter of input type?",
                "If it allows communication which is only in the direction from the caller to the function."
            ],
            "flags": 0,
            "guid": "J~}Tf7OWry",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a parameter of output type?",
                "If it allows communication which is only in the direction from the function to the caller."
            ],
            "flags": 0,
            "guid": "eNQv,!No0G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a parameter of input/output type?",
                "If it allows for bidirectional communication between the caller and callee (function)."
            ],
            "flags": 0,
            "guid": "K{wor;lmvq",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are l-values?",
                " l-values are those values that usually indicate locations and therefore are the values of expressions that can be on the left of an assignment command."
            ],
            "flags": 0,
            "guid": "iCRs8dAC}h",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are r-values?",
                " r-values are the values that can be stored in locations, and therefore are the values of expressions that can appear on the right of an assignment command"
            ],
            "flags": 0,
            "guid": "fa6!_eVh/R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the relation between the formal parameter and the actual parameter in call by reference? ",
                "The formal and the actual are two names for the same variable. Each modification of the formal parameter is a modification of the actual parameter. "
            ],
            "flags": 0,
            "guid": "sRly|u=!KP",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can you do call by reference in c?",
                "No, but you can simulate it using pointers. "
            ],
            "flags": 0,
            "guid": "NLP#$:H4]X",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a higher order function?",
                "A function which accepts functions as parameters, or returns a function. "
            ],
            "flags": 0,
            "guid": "IlF]0&a?md",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you implement shallow binding?",
                "Look for every names last association in the environment."
            ],
            "flags": 0,
            "guid": "Pi%,H_^=x8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which is harder to implement, shallow binding or deep binding?",
                "Deep binding"
            ],
            "flags": 0,
            "guid": "nFR_Pmt+;,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an exception?",
                "An event that is checked during the execution of a program and which must not (or cannot) be handled in the normal flow of control."
            ],
            "flags": 0,
            "guid": "kY!K$(^^<f",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Deep binding requires what for implementation?",
                "Auxiliary data structures"
            ],
            "flags": 0,
            "guid": "M&`R=K-`DG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a type system (and, by extension, a language) type safe? (also known as strongly typed)",
                "When no program can violate the distinctions between types defined in that language. Basically Type safety means that the compiler will validate types while compiling, and throw an error if you try to assign the wrong type to a variable."
            ],
            "flags": 0,
            "guid": "BLp1x:q|)7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a value denotable?",
                "If it can be associated with a name."
            ],
            "flags": 0,
            "guid": "Pc}1Qw3}fF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a value expressible?",
                "If it can be the result of a complex expression."
            ],
            "flags": 0,
            "guid": "zj<-7G7ln-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a value storable?",
                "If it can be stored in a variable."
            ],
            "flags": 0,
            "guid": "b>lQ6^s5zn",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does a program have static typing?",
                "If its checking of type constraints can be conducted on the program text at compile time"
            ],
            "flags": 0,
            "guid": "Lx7o(cf0?s",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does a program have dynamic typing?",
                "If its checking of type constraints can be conducted during runtime"
            ],
            "flags": 0,
            "guid": "Q5u+psoXEu",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why are type errors undecidable?",
                "If the type cannot be reached (halting problem), there is no way to find the type error."
            ],
            "flags": 0,
            "guid": "pJN&%dqq4w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the alternative to equivalence by name?",
                "Structural Equivalence"
            ],
            "flags": 0,
            "guid": "N.kMBb2d`C",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a type definition transparent?",
                "When the name of the type is just an abbreviation for the expression defining the type. "
            ],
            "flags": 0,
            "guid": "BzCoV4w`U0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Do most languages use type equivalence by name or structural equivalence? ",
                "A mix of both. Usually it depends on the type"
            ],
            "flags": 0,
            "guid": "J)_{Zj=zlT",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When are two types compatible?",
                "Type T is compatible with type S if a value of type T is permitted in any context in which a value of type S would be admissible. "
            ],
            "flags": 0,
            "guid": "b6Cfr,x4ms",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is type coercion?",
                "If a language allows compatibility between the types T and S, it also allows a value of type T to occur where a value of type S is expected. When this happens, the compiler inserts a type conversion between T and S."
            ],
            "flags": 0,
            "guid": "Pl+(N6fHp5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are explicit conversions? (or casts)",
                "Annotations in the language which specify that a value of one type must be converted to that of another type."
            ],
            "flags": 0,
            "guid": "c)-5z1(pf",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a type system monomorphic?",
                "When any language object (value, function, etc) has a unique type."
            ],
            "flags": 0,
            "guid": "u>@=DV>r`.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a type system polymorphic?",
                "When the same object can have more than one type."
            ],
            "flags": 0,
            "guid": "cJuUBnc8,N",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a name overloaded? (ad hoc polymorphism)",
                "When it corresponds to more than one object and context information must be used to determine which object is denoted by a specific instance of that name. "
            ],
            "flags": 0,
            "guid": "C0~*d}]MP|",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does a value exhibit universal parametric polymorphism?",
                "When it has an infinite number of different types which can be obtained by instantiating a single schema of general type."
            ],
            "flags": 0,
            "guid": "bb>q}4HPC?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is explicit polymorphism?",
                "Explicit annotations. For example generics in Java, or templates in C++"
            ],
            "flags": 0,
            "guid": "LQc(1s9]pl",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is implicit polymorphism?",
                "The programmer need not provide any type indications and instead the type checker tries to determine for each object, the most general type from which the other types can be obtained by instantiation."
            ],
            "flags": 0,
            "guid": "v{E9<k{c6Q",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does a value exhibit subtype (or bounded) polymorphism?",
                "When there is an infinity of different types which can be obtained by instantiating a general type scheme, substituting for a parameter the subtypes of an assigned type."
            ],
            "flags": 0,
            "guid": "f:kw*^=x/@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is type inference?",
                "the automatic detection of the type of an expression in a formal language"
            ],
            "flags": 0,
            "guid": "P.=p|5rRi?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is garbage collection?",
                "The process of managing memory, automatically. It finds the unused objects (that are no longer used by the program) and delete or remove them to free up the memory."
            ],
            "flags": 0,
            "guid": "r]sjLOa:tH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What are pointers with a value other than null that point to storage that is no longer allocated?",
                "dangling references"
            ],
            "flags": 0,
            "guid": "pI#hE3F#zD",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What do modern languages tend to prefer over coercions?",
                "casts"
            ],
            "flags": 0,
            "guid": "Dts.xO8}E2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are tombstones?",
                "a mechanism to detect dangling pointers and mitigate the problems they can cause in computer programs"
            ],
            "flags": 0,
            "guid": "Hv&RTW,W(.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " Why do locks and keys cost more than tombstones?",
                "because it is necessary to associate an additional word with each pointer"
            ],
            "flags": 0,
            "guid": "lre+@{,6T1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are shadowed variables?",
                "When two variables are declared with the same name in a sub- and super-class the sub-class shadows the superclass, meaning that you access the sub-class rather than the super-class."
            ],
            "flags": 0,
            "guid": "CxpDF}yx^?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is overriding?",
                "Overriding is a concept in object-orientation, where you redefine, or override, a method or variable implementation from a super class."
            ],
            "flags": 0,
            "guid": "qE:A`[GVB}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is overriding different from shadowing?",
                "Overriding is different from shadowing, in that instead of just pushing the old definition back, you redefine the current definition."
            ],
            "flags": 0,
            "guid": "D@uTwE]/hF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is overloading?",
                "With overloading you have two or more of the same types, but with different arguments. Depending on the argument, you choose which method to use."
            ],
            "flags": 0,
            "guid": "u:JANNlw$N",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between overloading and overriding?",
                "With overloading you need to have at least two definitions, while with overriding you need just one. It is also important in overriding that you have the same number of arguments."
            ],
            "flags": 0,
            "guid": "Piz;R(UiK{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is runtime polymorphism also known as?",
                "Overriding "
            ],
            "flags": 0,
            "guid": "B|[}.b@]IK",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is compile-time polymorphism also known as?",
                "Overloading"
            ],
            "flags": 0,
            "guid": "bs~[{f/uL0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean that a method is virtual?",
                "When a method is virtual is allows for overriding. A virtual function is also inheritable."
            ],
            "flags": 0,
            "guid": "DzrR2A@wPq",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does Java allow for virtual methods?",
                "By default all non-static functions in Java are virtual."
            ],
            "flags": 0,
            "guid": "r;843pmvZL",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between shadowing and overriding?",
                "Shadowing redefines an entire method or function. Overriding redefines only the implementation of a method or function."
            ],
            "flags": 0,
            "guid": "m0tXT*j^&-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a function monomorphic?",
                "When it works only for one type"
            ],
            "flags": 0,
            "guid": "E>@L~UtG!0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLMisc",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The physical machine manipulates data of which type?",
                "Bit strings"
            ],
            "flags": 0,
            "guid": "EC{sKuSHAu",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an abstract data type?",
                "Abstract Data type (ADT) is a type (or class) for objects whose behaviour is defined by a set of value and a set of operations."
            ],
            "flags": 0,
            "guid": "b<I//si<e1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is encapsulation in OOP?",
                "In object-oriented programming, encapsulation refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components"
            ],
            "flags": 0,
            "guid": "y76],m-C{]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are constructors?",
                "Operations which construct a new value of type T, possibly by using values of other known types."
            ],
            "flags": 0,
            "guid": "O]#5pk<tg1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are transformers or operators?",
                "Operations that compute the values of type T, possibly using other values. "
            ],
            "flags": 0,
            "guid": "yfW(`.O/l7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are observers?",
                "Operations that compute a value of a known type that is different from T, using one or more values of type T."
            ],
            "flags": 0,
            "guid": "fjg+EH*IBO",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is possible if a type enjoys representation independence?",
                "To replace its implementation by an equivalent one without causing any errors in clients. "
            ],
            "flags": 0,
            "guid": "B[#UHmNL1o",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                " What is the separation between interface and implementation?",
                "information hiding"
            ],
            "flags": 0,
            "guid": "EN3dOR}o+?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is ADT short for?",
                "Abstract Data Type"
            ],
            "flags": 0,
            "guid": "o%U/_Y(zO|",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "An ADT without what is completely useless?",
                "constructors"
            ],
            "flags": 0,
            "guid": "AEvxBJakV{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In what language does object-orientation have its roots?",
                "Simula (during the 60s) and Smalltalk (in the 70s)"
            ],
            "flags": 0,
            "guid": "CaO)gDA#Xy",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "‚Äúthe internal representation of an object is generally hidden from view outside of the object's definition‚Äù describes what in OOP?",
                "Information hiding"
            ],
            "flags": 0,
            "guid": "tD8eUX5e?o",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Following is a description of what? ‚ÄúA capsule containing both data and the operations that manipulate it and which provides an interface for the outside world through which the ______ is accessible.‚Äù",
                "An object"
            ],
            "flags": 0,
            "guid": "J0ZY{FA@5S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are operations in an object called?",
                "Methods (or functional fields, or member functions)"
            ],
            "flags": 0,
            "guid": "oleqD<}Xl-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are data items held in an object called?",
                "Instance variables (or data members or fields)"
            ],
            "flags": 0,
            "guid": "c/zKpWvDq0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a class?",
                "A model for a set of objects"
            ],
            "flags": 0,
            "guid": "t/K/khIa|e",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a class in simula?",
                "A procedure which returns a pointer to an activation record containing local variables and function definitions"
            ],
            "flags": 0,
            "guid": "Qf.r)y3zr9",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are object-oriented languages that lack lcasses based on?",
                "Delegation (or prototypes)"
            ],
            "flags": 0,
            "guid": "Q(YG9Nk!|w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In every class there are at least two views, which?",
                "Private and public. With a private view, everything is visible, with a public with only the public parts are visible."
            ],
            "flags": 0,
            "guid": "b>FN|2-x8S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why do abstraction mechanisms play a crucial role in computing?",
                "Because they allow us to manage the complexity inherent in most computational systems by isolating the improtant aspects in a specific context."
            ],
            "flags": 0,
            "guid": "p^UZWt,xfX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of an abstract machine?",
                "Assume that we are given a programming language, \\(\\mathscr{L}\\). An abstract machine for ‚Ää\\(\\mathscr{L}\\), detoned by \\(\\mathscr{M}_\\mathscr{L}\\), is any set of data structures and algorithms which can perform the storage and execution of programs written in \\(\\mathscr{L}\\)"
            ],
            "flags": 0,
            "guid": "Me7MMaUWm)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the store in an abstract machine serve to store?",
                "Data and programs"
            ],
            "flags": 0,
            "guid": "L{u=grUf2l",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the interpreter in an abstract machine do?",
                "It is the component that executes the instructions contained in programs."
            ],
            "flags": 0,
            "guid": "bsP1N:!:uL",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of a machine language?",
                "Given an abstract machine \\(\\mathscr{M}_\\mathscr{L}\\), the language \\(\\mathscr{L}\\) ‚Äúunderstood‚Äù by \\(\\mathscr{M}_\\mathscr{L}\\)‚Äôs interpreter is called the <i>machine language</i> of \\(\\mathscr{M}_\\mathscr{L}\\)"
            ],
            "flags": 0,
            "guid": "mgI*y`pR)9",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why are programs written in the machine language of \\(\\mathscr{M}_\\mathscr{L}\\) stored in the abstract machine‚Äôs storage structures?",
                "So that they cannot be confused with other primitive data on which the interpreter operates (from the interpreters viewpoints, programs are also a kind of data)"
            ],
            "flags": 0,
            "guid": "kR4VxQy/{+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are low-level languages?",
                "Languages whose abstract machines are very close to, or coincide with, the physical machine."
            ],
            "flags": 0,
            "guid": "B%a`h,!Mg4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Often when we speak generically about ‚Äúmachine language‚Äù what do we mean?",
                "We mean the language (a low-level one) of a physical machine. "
            ],
            "flags": 0,
            "guid": "hmrqZm}5i~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a physical machines assembly language?",
                "A symbolic version of the physical machine (that is, which uses symbols such as ADD, MUL etc., instead of their associatyed hardware binary codes)"
            ],
            "flags": 0,
            "guid": "t6E8o*d4?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How are programs written in assembly code translated to machine code?",
                "Using an assembler"
            ],
            "flags": 0,
            "guid": "QkJC$99$-m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are high-level languages?",
                "Those which support the use of constructs that use appropriate abstraction mechanisms to ensure that they are independent of the physical characteristics of the computer."
            ],
            "flags": 0,
            "guid": "tr0KLU!=4L",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why are algorithms usually written in high-level language rather than low-level ones?",
                "The low-level algorithms take too many of the physical machines quirks into account, meaning that it is much easier to understand with a high-level language. "
            ],
            "flags": 0,
            "guid": "r1UIo{84!i",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are abstract machines always physical machines?",
                "No, abstract machines can be anything from physical machine to the World Wide Web."
            ],
            "flags": 0,
            "guid": "M-tBmUx8_+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In a physical machine, the language \\(\\mathscr{L}H\\) which the physical machine executes is composed of what?",
                "Relatively simple instructions"
            ],
            "flags": 0,
            "guid": "Nbbv1FD`zh",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In a physical machine, what is the difference between <pre> ADD R5, R0 </pre> and <pre> ADD (R5), (R0) </pre>?",
                "Without the paranthesis it indicates the contents will be summed and the result stored in R5, while with paranthesis the contents of the memory cells whose addresses are contained in R0 and R5 is computed and the result stored in the cell whose address is in R5."
            ],
            "flags": 0,
            "guid": "Q.,q;TM$hu",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is CISC short for?",
                "Complex Insturction Set Computer, processors which have many machine instructions"
            ],
            "flags": 0,
            "guid": "EjmKSkb=Uq",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is RISC short for?",
                "Reduced Instruction Set Computers, architectures in which there tend to be fewer instructions which are, in particular, simple enough to be executed in a few (possibly one) clock cycles and in pipelined fashion."
            ],
            "flags": 0,
            "guid": "l$.,Re:%7J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Where are the operations for processing primitive data and the usual arithmetic and logical operations implemented?",
                "In the ALU (Arithmetic and Logic Unit)"
            ],
            "flags": 0,
            "guid": "mDxC~sv12z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the Program Counter register store?",
                "The address of the next instruction to execute."
            ],
            "flags": 0,
            "guid": "OTJGR4$*Hv",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is the interpreter for the hardware (physical) machine implemented?",
                "As a set of physical devices which comprise the Control Unit and which support execution of the so-called fetch-decode-execute cycle."
            ],
            "flags": 0,
            "guid": "QP%0W|#sjb",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "At a physical level, what is the difference between data and instructions?",
                "There are none, they are both simply bits. However, conceptually they are different."
            ],
            "flags": 0,
            "guid": "E8Mjm#[(78",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is it possible to implement \\(\\mathscr{M}_\\mathscr{L}\\) in hardware?",
                "Using physical devices such as memory, arithmetic and logic circuits, buses etc., to implement a physical machine whose machine language coincides with \\(\\mathscr{L}\\). To do this, it is sufficient to implement in the hardware the data structures and algorithms constituting the abstract machine."
            ],
            "flags": 0,
            "guid": "NYWnfeql7u",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What advantage does the implementation of machine \\(\\mathscr{M}_\\mathscr{L}\\)  in hardware have?",
                "That the execution of programs in \\(\\mathscr{L}\\) will be fast because they will be directly executed by hardware."
            ],
            "flags": 0,
            "guid": "yC7xpsVO*^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When implementing \\(\\mathscr{M}_\\mathscr{L}\\) in hardware, what kind of langauges are used?",
                "Low-level languages, because their constructs are very close to the operations that can be naturally defined using just physical devices."
            ],
            "flags": 0,
            "guid": "J<X~rI`;Eb",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the three ways to implement an abstract machine \\(\\mathscr{M}_\\mathscr{L}\\)?",
                "Implementation in <i>hardware</i><br/>Simulation using <i>software</i><br/>Simulation (emulation) using <i>firmware</i><br/>"
            ],
            "flags": 0,
            "guid": "NsZ`bMq$Ni",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a partial function?",
                "A function that is a correspondence between the two sets A and B but can be undefined for some elements of A."
            ],
            "flags": 0,
            "guid": "J!|+%7iple",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the pros and cons of implementing \\(\\mathscr{M}_\\mathscr{L}\\) in hardware?",
                "It provides the greatest speed but no flexibility."
            ],
            "flags": 0,
            "guid": "qwGMyPumZ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the pros and cons of implementing \\(\\mathscr{M}_\\mathscr{L}\\) in software?",
                "It affords the highest flexibility and least speed"
            ],
            "flags": 0,
            "guid": "NZV(=*4^-x",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the pros and cons of implementing \\(\\mathscr{M}_\\mathscr{L}\\) in firmware?",
                "It acts as an intermediate between implmentation in software and hardware. Therefore neither the greatest speed, nor the greatest flexibility, but neither the slowest speed nor the worst flexibility."
            ],
            "flags": 0,
            "guid": "y|_Db`YJdM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does \\(\\mathscr{P}^\\mathscr{L} : \\mathscr{D} \\to \\mathscr{D}\\) indicate?",
                "A program written in \\(\\mathscr{L}\\). (this can be seen as a partial function, where \\(\\mathscr{D}\\) indicates both input and output data."
            ],
            "flags": 0,
            "guid": "cUf+v&ecnc",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is \\(\\mathscr{I}^{\\mathscr{L}o}_\\mathscr{L}\\)?",
                "An interpreter implemented in \\(\\mathscr{L}o\\) which interprets all of \\(\\mathscr{L}\\)‚Äôs instructions."
            ],
            "flags": 0,
            "guid": "iodcjJ0Li",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an interpreter for language \\(\\mathscr{L}\\)?",
                "An interpreter for \\(\\mathscr{L}\\) written in language \\(\\mathscr{L}o\\), is a program which implements a partial function: <br/> \\(\\mathscr{I}^{\\mathscr{L}o}_\\mathscr{L}:(\\mathscr{P}rog \\times \\mathscr{D}) \\to \\mathscr{D}\\) such that \\(\\mathscr{I}^{\\mathscr{L}o}_\\mathscr{L}:(\\mathscr{P}^\\mathscr{L}, Input) = \\mathscr{P}^\\mathscr{L} (input)\\)  "
            ],
            "flags": 0,
            "guid": "Ar>)1K5toI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is \\(\\mathscr{C}_{\\mathscr{L},\\mathscr{L}o}\\)?",
                "A compiler where \\(\\mathscr{L}\\) is the soruce language and \\(\\mathscr{L}o\\) is the object language."
            ],
            "flags": 0,
            "guid": "b5ym^R`%ar",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the main disadvantage of the interpreted implementation?",
                "It‚Äôs low efficiency"
            ],
            "flags": 0,
            "guid": "AMSBZ#RI}B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the main advantage of the interpreted implementation?",
                "It‚Äôs flexbility. Moreover, the development of an interpreter is easier than the development of a compiler."
            ],
            "flags": 0,
            "guid": "lH5OvJ(MI`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Describe the functioning of the interpreter for a generic abstract machine.",
                "The interpreter in a generic abstract machine executes the instructions contained in programs."
            ],
            "flags": 0,
            "guid": "N!E9sE9FHZ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLEPChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Describe the differences between the interpretative and compiled implementations of a programming language, emphasising the advantages and disadvantages.",
                "The compiled approach is faster, while less flexible. The interpreted approach is more flexiblle, while slower. The compiled approach translates a program at compile-time to machine language, while an intepreter translates it in runtime. This means that concepts like for loops will be much slower in interpreters, since they have to interpret the entire loop, while a compiler might have a quicker way."
            ],
            "flags": 0,
            "guid": "i0t@P{4O.H",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLEPChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Assume you have available an already-implemented abstract machine, C, how could you use it to implement an abstract machine for another language, L?",
                "You can use the abstract machine and it‚Äôs language \\(\\mathscr{M}c_{\\mathscr{L}c}\\) to implement \\(\\mathscr{M}L_{\\mathscr{L}L}\\)"
            ],
            "flags": 0,
            "guid": "w3xXhORl&y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLEPChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which three areas did Morris identify at which a description of a language can occur?",
                "<i>grammar, semantics</i> and <i>pragmatics</i>."
            ],
            "flags": 0,
            "guid": "y]4fcn*Q<f",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Grammar is the part of the description of the language which answers what question?",
                "Which phrases are correct"
            ],
            "flags": 0,
            "guid": "Dh=qoOFD)9",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does syntax describe?",
                "Which sequences of words constitute legal phrases"
            ],
            "flags": 0,
            "guid": "d)p;nyD^,U",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Semantics is the part of the description of the language which seeks to answer which question?",
                "What does a correct phrase mean"
            ],
            "flags": 0,
            "guid": "M7:ZE-)1AQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Pragmatics is the part of a language description which asks itself what?",
                "How do we use a meaningful sentence"
            ],
            "flags": 0,
            "guid": "cHA<^t<#M=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The three classical levels of language description are <i> grammar, semantics </i> and <i> pragmatics</i>, what is a fourth one we can add in the case of programming languages?",
                "Implementation"
            ],
            "flags": 0,
            "guid": "lJdcWSRE<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a grammar ambiguous?",
                "If there exists at least one string of \\( \\mathscr{L}(G)\\) which admits more than one derivation tree"
            ],
            "flags": 0,
            "guid": "n:e@m^*8)e",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does a string of characters admit a derivation tree?",
                "If it is the result of a left-to-right traversal of the derivation tree."
            ],
            "flags": 0,
            "guid": "OPB+wf!E6W",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is object language the same as machine code?",
                "Not necessarily, it is merely a language twoards which the translation is directed."
            ],
            "flags": 0,
            "guid": "lG=,N_R2b&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How many tokens will the lexical analyser of C or Java produce with the following string? \\(x = 1 + foo++;\\)",
                "7: the identifier x, the assignment operator =, the number 1, the addition operator +, the identifier foo, the auto increment operator ++ and finally the command termination token ;"
            ],
            "flags": 0,
            "guid": "e./|p%:Gg~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does the lexical analyser check for any kind of errors?",
                "No, it simply scans the input text from left to right, taking a single pass to recognise tokens."
            ],
            "flags": 0,
            "guid": "OONK$V^P/;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is another name for the syntactic analyser?",
                "The parser"
            ],
            "flags": 0,
            "guid": "x;/9P@w}zl",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the goal of the syntactic analyser?",
                "To construct a derivation tree for the list of tokens produced by the lexical analyser"
            ],
            "flags": 0,
            "guid": "gFI90cT$N_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which two main families do formal methods for semantics divide into?",
                "Denotational and operational (*algebraic and axiomatic)"
            ],
            "flags": 0,
            "guid": "fDJ2I4G`u*",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is the name and the object it denotes the same thing?",
                "No, a name is just a character string, while its denotation can be a complex object such as a variable, a function, a type, and so on."
            ],
            "flags": 0,
            "guid": "L`mp)w(b}4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can an object have more than one name?",
                "Yes, this is called aliasing"
            ],
            "flags": 0,
            "guid": "bE:+n(9IWd",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a procedure?",
                "A name associated with a set of commands, together with certain visibility rules which make available to the programmer its sole interface. (e.g. Functions, methods and subprograms)"
            ],
            "flags": 0,
            "guid": "C0wXY?*K^)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are objects to which a name can be given called?",
                "Denotable objects"
            ],
            "flags": 0,
            "guid": "sJCXs3/O@<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of an environment?",
                "The set of associations between names and denotable objects which exist at runtime at a specific point in the program and at a specific time during execution, is called the <i> (referencing) environment </i>"
            ],
            "flags": 0,
            "guid": "u,]n(+|C.X",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a declaration?",
                "A construct that allows the introduction of an association in the environment."
            ],
            "flags": 0,
            "guid": "OKPy}-GF9N",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is it called when a single object is visible using different names in the same environment?",
                "Aliasing"
            ],
            "flags": 0,
            "guid": "hLb!TX&>4S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a block?",
                "A textual region of the program, identified by a start sign and an end sign, which can contain declarations local to that region (that is, which appear within the region)."
            ],
            "flags": 0,
            "guid": "H19HuM;^~/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <b>block associated with a procedure</b>?",
                "A block associated with declarations local to a procedure. It corresponds textually to the body of the procedure itself, extended with the declarations of formal parameters."
            ],
            "flags": 0,
            "guid": "lyf%^HN}Dl",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an <b>in-line block</b>?",
                "A lbock which does not correspond to a declaration of procedure and which can appear (in general) in any position where a command can appear"
            ],
            "flags": 0,
            "guid": "u@!;v#2K]x",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A declaration local to a block is visible in that block and in all blocks listed within it, unless there is a new declaration of the same name in that same block. What then happens?",
                "The block which contains the redefinition of the new declaration hides the previous one."
            ],
            "flags": 0,
            "guid": "A-MZFA;i<Z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the three components  the environment associated with a block is formed of?",
                "Local Environment, non-local environment and global environment."
            ],
            "flags": 0,
            "guid": "w00Cw+ri&&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the local environment?",
                "The environment composed of the set of associations for names declared locally to the block. In case of the block being a procedure, the local environment contains also the associations for the formal parameters, given that they can be seen, as far as the environment is concerned, as locally declared variables."
            ],
            "flags": 0,
            "guid": "Bvv.>0D2iX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the non-local environment?",
                "This is the environment formed from the associations for names, which are visible from inside a block but which have not been declared locally."
            ],
            "flags": 0,
            "guid": "qaF,KnXLEU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the global environment?",
                "This is the environment formed from associations created when the program‚Äôs execution began. It contains the associations for names which can be used in all blocks forming the program."
            ],
            "flags": 0,
            "guid": "j2Ta5wpS^0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which head more efficient execution, dynamic or static scope?",
                "Static scope"
            ],
            "flags": 0,
            "guid": "DkwAMVXgU?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of dynamic scope?",
                "According to the rule of dynamic scope, the valid association for a name X, at any point P of a program, is the most recent (in the temporal sense) association creatyed for X which is still active when control flow arrives at P."
            ],
            "flags": 0,
            "guid": "Ejt<>qFmAq",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the dynamic scope rule also called?",
                "The rule of the most recent association"
            ],
            "flags": 0,
            "guid": "gzY$+Dm;>k",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using the dynamic scope, what is the value of x when write is called? <br/> <pre> {const x = 0;\nvoid fie(){\nwrite(x);\n}\nvoid foo(){\nconst x = 1;\n{const x = 2;\n}\nfoo();\n}\nfoo();\n}</pre>",
                "1. Even if 2 is the most recent one created, it is no longer active when procedure fie is exeuted and is therefore not considered."
            ],
            "flags": 0,
            "guid": "lml+KC@9|m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using static scope, what is printed? <br/> <pre> {int x = 0;\nvoid fie(int n){\nx = n+1;\n}\nfie(3);\nwrite(x);\n{int x = 0;\nfie(3);\nwrite(x);\n}\nwrite(x);\n}</pre>",
                "4 0 4"
            ],
            "flags": 0,
            "guid": "m,/t-:4k~+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What part of an abstract machine deals with memory management?",
                "The interpreter."
            ],
            "flags": 0,
            "guid": "yMd8P#!A^:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are global variables dynamic or static memory?",
                "Static memory, they can be stored in a memory area that is fixed before execution begins because they are visible throughout the program"
            ],
            "flags": 0,
            "guid": "eF03V1)_Gz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which scheme is used when blocks are enteredd and left?",
                "LIFO. This makes sense, as when block A is enttered, and then block B is entered, we first need to leave block B before blcok A."
            ],
            "flags": 0,
            "guid": "Jf$nzX7eRa",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If the average number of simultaneously active calls to the same procedure is less than the number of procedures declared in the program, will you want to use dynamic or static memory?",
                "Dynamic, as using a stack will save space, for there will be no need to allocate a memory area for each declared procedure, as must be done in the case of entirely static management."
            ],
            "flags": 0,
            "guid": "b/qlhc8hh!",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are intermediate results in activation records for in-line blocks?",
                "Intermediate results that will not have an explicit name when doing calculations, e.g. (a+x) / (x+y) will have (a+x) and (x+y) as two different intermediate results. On many architectures they can be stored in registers"
            ],
            "flags": 0,
            "guid": "ee@2RgHQGP",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are local variables in activation records for in-line blocks?",
                "Variables declared inside blocks. These must be stored in a memory space whose size will depend on the number and type of the variables."
            ],
            "flags": 0,
            "guid": "p0#qfQQVuA",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the dynamic chain pointer in in-line blocks?",
                "The field that stores a pointer to the previous activation record on the stack (or to the last activation record created)."
            ],
            "flags": 0,
            "guid": "eQCm2kYM14",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of the static chain pointer in an activation record for procedures?",
                "It stores the information needed to implement the static scope rules."
            ],
            "flags": 0,
            "guid": "oUl/dqS@V`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of the return address in an activation record for procedures?",
                "This contains the address of the first instruction to execute after the call to the current procedure/function has terminated execution."
            ],
            "flags": 0,
            "guid": "d_K5aQ7{f8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of the returned result in an activation record for procedures?",
                "This is present only in fuctions. Contains the address of the memory location where the subprogram stores the value to be returned by the function when it terminates. This memory location is inside the caller‚Äôs activation record."
            ],
            "flags": 0,
            "guid": "u5T4CXPUY;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of parameters in an activation record for procedures?",
                "The values of actual parameters used to call the procedure or function are stored here."
            ],
            "flags": 0,
            "guid": "k;6_$YG;o8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is an activation record pushed to the stack?",
                "When a block is entered or a procedure is called. It is later removed from the sttack when the block is exited or when the procedure terminates."
            ],
            "flags": 0,
            "guid": "P7#a:!y(l6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the purposes of the code pieces <i>calling sequence</i> for the caller and <i> prologue </i> and <i>epilogue</i> for the callee? ",
                "The calling sequence is a piece of code inserted into the caller of a function/procedure to be executed immediately before the procedure call. This piece of code is used for stack management. <br/> The prologue is executed immediately after the call, and the epilogue is executed when the procedure ends execution. They manage the different operations needed to handle activation records and correctly implement a procedure call."
            ],
            "flags": 0,
            "guid": "G3BxQ4r%nK",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Languages which include explicit commands for memory allocation such as C and Pascal don‚Äôt use a stack, but instead use what?",
                "A heap. This is simply an array of memory in which blocks of memory can be allocated and deallocate relatively freely."
            ],
            "flags": 0,
            "guid": "clld0;CdM*",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the case in which a language does not allow runtime allocation of variable-length memory spaces, what kind of blocks do we use?",
                "Fixed-length blocks."
            ],
            "flags": 0,
            "guid": "z#WoHtM$U<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When the heap is divided into fixed-length blocks, what structure is used for the blocks?",
                "A listt structure called the free list."
            ],
            "flags": 0,
            "guid": "p]c^|!>vG,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When are variable-length blocks used in the heap?",
                "In the case in which the language allows the runtime allocation of variable-length memory spaces, fo rexample to store an array of variable dimension"
            ],
            "flags": 0,
            "guid": "e_lYs;T9@Z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When would it be insufficient to do memory management using just the stack?",
                "When a language includes explicit commands for memory allocation, as for example do C and Pascal."
            ],
            "flags": 0,
            "guid": "wk=weC(/sa",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using fixed-length blocks, when an operationg requires the allocation of a memory block from the heap (for example using the malloc command), what happens?",
                "The first element of the free list is removed from the list, the pointer to this element is returned to the operations that requested the memory, and the pointer to the free list is updated so that it points to the next element."
            ],
            "flags": 0,
            "guid": "ObGJ&WY}0/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using fixed-length blocks, what happens when memory is freed or deallocated?",
                "The freed block is linked again to the head of the free list. "
            ],
            "flags": 0,
            "guid": "F~2QtZM`U]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does internal fragmentation occur?",
                "When a block of size strictly larger than the requested by the program is allocated."
            ],
            "flags": 0,
            "guid": "O6K[dyiRC+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does external fragmentation occur?",
                "When the free list is composed of blocks of a relatively small size and for which, evn if the sum of the total available free memory is enough, the free memory cannot be effectively used. <img src=‚Äùexternal-fragmentation.png />"
            ],
            "flags": 0,
            "guid": "Goiud)?YF0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the two memory allocation techniques used to avoid external fragmentation?",
                "Single free list and multiple free lists"
            ],
            "flags": 0,
            "guid": "M9^v18P4^8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is sequence control implemented in low-level languages?",
                "By updating the value of the PC (Program Counter) register."
            ],
            "flags": 0,
            "guid": "Mv`MS1tvom",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of expressions?",
                "An expression is a syntactic entity whose evaluation either produces a value or fails to terminate, in which case the expression is undefined."
            ],
            "flags": 0,
            "guid": "CjbSvW79f@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is LISP an acronym of?",
                "LISt Processor"
            ],
            "flags": 0,
            "guid": "QZm[wz.sCK",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What programming language represents functions using a particular notation known as <i>Cambridge Polish</i>?",
                "Lisp (1958)"
            ],
            "flags": 0,
            "guid": "Qd*.rV?!w(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a problem with the infix notation?",
                "The infix notation makes it harder to realize the precedence of the expressions"
            ],
            "flags": 0,
            "guid": "uk#,HeJMR`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What evaluation strategy is used with Prefix Notation?",
                "Simply walking the expression from left to right using a stack to hold its components."
            ],
            "flags": 0,
            "guid": "PlpDZ<cr#x",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which notation is easiest to evaluate?",
                "Postfix Notation is easiest. Then prefix, then infix."
            ],
            "flags": 0,
            "guid": "vNgL)8F*va",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In which languages do all operators have the same precedence, meaning you have to use parentheses?",
                "APL and Smallttalk"
            ],
            "flags": 0,
            "guid": "Qq#w{Zm0R(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of commands?",
                "A command is a syntactic entity whose evaluation does not necessarily return a value but can have a side effect."
            ],
            "flags": 0,
            "guid": "BaE{2d-sc8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In what type of programming languages are commands mostly used?",
                "Imperative programming languages."
            ],
            "flags": 0,
            "guid": "Br~s}@rAx+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The result of the evaluation of an expression is a value, what is the result of evaluating a command?",
                "A new state which differs from the start state precisely in the modifications caused by the side-effects of the command itself"
            ],
            "flags": 0,
            "guid": "x?[cq6R38J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is specific about variables in imperative languages?",
                "They are modifiable. They act as containers of references. "
            ],
            "flags": 0,
            "guid": "OfWA{q7pGT",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is it often said that functional languages do not have variables?",
                "In their pure forms, they do not have any modifiable variables."
            ],
            "flags": 0,
            "guid": "HVWSc=KT54",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between the reference model for variables and the modifiable-variable model?",
                "In the reference model each variable points to a reference, while the modifiable-variable model each model contains an element."
            ],
            "flags": 0,
            "guid": "lLPSVwn=0Z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What type of command is <pre>;</pre>?",
                "A sequential command."
            ],
            "flags": 0,
            "guid": "jw,.Ax3w:V",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are composite commands?",
                "Delimiters used to group a sqeuence of commands, e.g. in C <pre> { \n‚Ä¶\n}</pre> This is also called a block."
            ],
            "flags": 0,
            "guid": "JoaS[@Sv^=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are commands for explicit sequence control?",
                "These are the sequential commands and <i>goto</i>. Let us consider, in addition, the composite command, which allows us to consider a group of commands as a single one, as being in this category."
            ],
            "flags": 0,
            "guid": "OWqd9dg[^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are conditional (or selection) commands?",
                "These are the commands which allow the specification of alternative patths that the competition can take. They depend on the satisfaction of specific conditions."
            ],
            "flags": 0,
            "guid": "ePQMqX&J!0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are iterative commands?",
                "These allow the repetition of a given command for a predefined number of times, or until the satisfactionof specific conditions."
            ],
            "flags": 0,
            "guid": "w|>s;-1S84",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the two groups we can divide conditional commands into?",
                "<pre>If</pre> and <pre>Case</pre>"
            ],
            "flags": 0,
            "guid": "E$5ZMcm$7S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When was the if command originally introduced?",
                "Algol60"
            ],
            "flags": 0,
            "guid": "J*D7f`A@_C",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is <pre>case</pre> implemented in assembly?",
                "Using a vector of contiguous cells called a <i>jump table</i>, in which each element of the table contains the address of the first sintruction of the corespond command in the case‚Äôs branches."
            ],
            "flags": 0,
            "guid": "fifo>{oAv(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why use case over a series of nested ifs?",
                "It is more efficient"
            ],
            "flags": 0,
            "guid": "M$T{WsXpJ^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the two basic mechanisms employed to achieve the same effect as goto?",
                "Structured iteration and recursion."
            ],
            "flags": 0,
            "guid": "rEKXgJ&6@y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the most common form of unbounded iteration?",
                "The <i>while</i> command"
            ],
            "flags": 0,
            "guid": "wvJ_M4Q@o,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is special about Pascals while loop?",
                "It runs before it checks the condition, meaning it will always run once."
            ],
            "flags": 0,
            "guid": "43)J<g/q]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is bounded iteration also called?",
                "Numerically controlled iteration"
            ],
            "flags": 0,
            "guid": "jgCqS#DqA`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the most common example of a command for bounded iteration?",
                "The <pre>for</pre> command"
            ],
            "flags": 0,
            "guid": "B0eiYa:mWF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What kind of <pre>for</pre> commands cannot be translated into a <pre>while</pre>?",
                "None, every for command can easily be translated into a while. "
            ],
            "flags": 0,
            "guid": "M6}C$5pQ@R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why would you use a for loop rather than a while loop?",
                "for is more compact, it makes understanding what the loop does a lot easier, it can also prevent some common errors. It <i>can</i> also be optimsed better."
            ],
            "flags": 0,
            "guid": "hNMr-^Iyyu",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the essential idea behind srtuctured control constructs?",
                "By having a single entry and a single exit point, they allow structuring of the code in which the linear scanning of the program text corresponds to execution flow."
            ],
            "flags": 0,
            "guid": "CMoN|K|-F:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is mutual recursion?",
                "When a procedure P calls another procedure Q, which in itst turn, calls P."
            ],
            "flags": 0,
            "guid": "zD%Uo1bJ8T",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why does the presence of recursion in a programming language make it necessary to include dynamic memory management?",
                "Since it is not possible sttatically to determine the maximum number of instances of a single function that will be active at the same time (and, therefore, to determine the maximum number of activation records required)."
            ],
            "flags": 0,
            "guid": "dTTBk0=Iy0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What automatic technique can be used to transofrm a function into an equivalent one with tail recursion?",
                "Conntinuation passing style."
            ],
            "flags": 0,
            "guid": "K60so<?zzM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is recursion faster than iteration?",
                "Not necessarily, but with tail recursion it can attain speeds similar to that of iterative."
            ],
            "flags": 0,
            "guid": "n`3=7WDpNJ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the parameter passing discipline?",
                "The way in which actual parameters are paired with formal parameters, and the semantics which results from this."
            ],
            "flags": 0,
            "guid": "IpBms[*:cH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In call by value, what is the link between the formal and the actual parameter? ",
                "There is none"
            ],
            "flags": 0,
            "guid": "imZk>E0/81",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is another name for call by reference?",
                "Call by variable"
            ],
            "flags": 0,
            "guid": "IXX9|#SX&?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is call by reference unidirectional or bidirectional?",
                "Bidirectional"
            ],
            "flags": 0,
            "guid": "PezVUKFan1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the opposite of call by value?",
                "Call by result, rather than copying the value going into the function, it copies the value going out."
            ],
            "flags": 0,
            "guid": "b6^p6YR:*d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why would you use call by result?",
                "If you have parallel things going around while the call by result function is running. "
            ],
            "flags": 0,
            "guid": "BvM3Lpi;dx",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between call by name and call by value?",
                "Call by name reduces only when the variables are needed, call by value reduces immediately. i.e. f(a, b, c) a = (2+2), b = (4+4), c = (1+1), if a and b are not used, and only c, call by name would only reduce c. Call by name also reduces or computes whenever needed."
            ],
            "flags": 0,
            "guid": "I7Ins)[^Ge",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is structured programming?",
                "Structured programming is a programming paradigm aimed at improving the clarity, quality, and development time of a computer program by making extensive use of the structured control flow constructs of selection and repetition, block structures, and subroutines"
            ],
            "flags": 0,
            "guid": "FXgIN0#aCD",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the <i>copy rule?</i>",
                "<i>Let f be a function with a single formal parameter, x, and let a be an axpression of a type which is compatible witht that of x. A call to f witht an actual parameter a is semantically equivalent to the execution of the body of f in which all occurrences of the formal parameter, x, have been replaced by a.</i> i.e. when a parameter is needed in the program, the actual parameter is put in e.g. 5-7, rather than (-2)."
            ],
            "flags": 0,
            "guid": "g0VkDqkA}c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When using dynamic scope, do you use shallow or deep binding?",
                "You don‚Äôt need to use a specific one, you can use both."
            ],
            "flags": 0,
            "guid": "vK[3.17mka",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When using static scope, do you use shallow or deep binding? ",
                "Deep binding"
            ],
            "flags": 0,
            "guid": "l}e~V(-Rtd",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the simplest and intuitive way in which an abstract machienc an implement exceptions?",
                "Using a stack of activation records. When a block is entered at runtime, a pointer to the corresponding handler (together with the type of exception to which it refers) is inserted into the activation record (of the current procedure or of the current anonymous block). When a normal exit is made from a protected block (that is, because control transfers from it in the usual way and not through raising an exception), the reference to the handler is removed from the stack. Finally when an exception is raise, the abstract machine look sfor a handler for this exeption in the current activation record. If one is not found, it uses the information in the record to reset the state of the machine, removes the record from the stack and rethrows the exception."
            ],
            "flags": 0,
            "guid": "xeMo%V-0!_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a data type?",
                "A data type is a homogeneous collection of values, effectively presented, equipped with a set of operations which manipulate these values."
            ],
            "flags": 0,
            "guid": "dxFI(E-*/.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why are real number not effectively presentable?",
                "Because there are real numbers with inifnite decimal expansion, which cannot be obtained by means of any algorithm."
            ],
            "flags": 0,
            "guid": "mSu1gf]+i$",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do most languages require of the type of <i>exp</i> in the following code segment? <pre>x := exp</pre>",
                "That the type of exp coincides (or better, is compatible) with the (declared) type of x."
            ],
            "flags": 0,
            "guid": "JKGenrEgO3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does tail recursion fix over normal recursion?",
                "The problem of the normal recursion using too much memory (as well as some efficiency)"
            ],
            "flags": 0,
            "guid": "n38%#+<=hG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLMisc",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does this describe? <br> A type system is this when no program, during its execution, can generate an usignalled error derived from a type violation.",
                "Type safe, meaning no program can violate the distinctions between types defined in that language."
            ],
            "flags": 0,
            "guid": "lg#1wiGd$w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which of the following are a function in imperative languages? Storable, expressable, denotable.",
                "For imperative languages it is only denotable. However, for functional languages functional values can both be denotable and expressible, and in some languages even storable. "
            ],
            "flags": 0,
            "guid": "QkzpoZ@>06",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A problem with static type checking is that static types can decree as erroneous, programs that, in reality do not cause a runtime type error, why is this?",
                "A condition that will never be met might assign a type to something that it can not hold, for example <pre>\nint x; \nif (0==1) x = ‚Äúpippo‚Äù; \nelse x = 3 + 4;</pre>\nhere the command x = ‚Äúpippo‚Äù would never be executed, but the static type checker would likely still cause an error."
            ],
            "flags": 0,
            "guid": "sLnispm[LX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the most common sets of character codes for <i>character</i> types?",
                "ASCII and UNICODE. The representation in store will consist of a single byte with ASCII and two bytes with UNICODE."
            ],
            "flags": 0,
            "guid": "nD7^AGlBWz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why do we have no interest in explicitly saying what void returns?",
                "It will return something unique each time, that is of no use. "
            ],
            "flags": 0,
            "guid": "I66C!n<:BX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of <pre>void</pre>?",
                "It is used to denote the type of operations that modify the state but return no value."
            ],
            "flags": 0,
            "guid": "v~osfRLC3A",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the first language to introduce intervals as well as enumerations?",
                "Pascal"
            ],
            "flags": 0,
            "guid": "ldPm/C]<uU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are records (or structures) homogenous or heterogeneous?",
                "Heterogeneous"
            ],
            "flags": 0,
            "guid": "u-%Y)--_iL",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can records be nested?",
                "In many languages, yes."
            ],
            "flags": 0,
            "guid": "p.)NouNB6<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between structs and unions in C?",
                "Unions share the same memory location."
            ],
            "flags": 0,
            "guid": "mn$,=UnTK1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the size of a union in c? ",
                "It is equal to the type with the largest size."
            ],
            "flags": 0,
            "guid": "P7LYwZ.!bF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are arrays homogenous or heterogeneous?",
                "Homogenous"
            ],
            "flags": 0,
            "guid": "ITX&jyHmdH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the most simple operation permitted on an array?",
                "Element selection"
            ],
            "flags": 0,
            "guid": "c]}BH.2%+G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which programming langauges allow the definition of set types?",
                "Pascal and its descendants"
            ],
            "flags": 0,
            "guid": "wDzRNZ&YvV",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Some languages permit the direct manipulation of l-values. What is the corresponding type called?",
                "A pointer type"
            ],
            "flags": 0,
            "guid": "O^b8H#-@3a",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Are poitners necessary in a language with refernce model for variables?",
                "No, every variable is always a reference."
            ],
            "flags": 0,
            "guid": "LG`O9ue5g&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is explicit deallocation?",
                "When the language makes available a mechanism with which the programmer can release the memory referred to by a pointer. "
            ],
            "flags": 0,
            "guid": "JGozyo~lN.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If the definition of a type is opaque, do we have structural equivalence or equivalence by name?",
                "Equivalence by name"
            ],
            "flags": 0,
            "guid": "tv4.ZCc~|c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If the definition of a type is transparent, do we have structural equivalence or equivalence by name?",
                "Structural Equivalence"
            ],
            "flags": 0,
            "guid": "KG1)%Tg(H=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of equivalence by name?",
                "Two types are equivalent by name only if they have the same name (so a type is equivalent only to itself)"
            ],
            "flags": 0,
            "guid": "e@*+3YbLdv",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Pascal adopts the rule of <i>weak</i> (or lax) equivalence by name, what does this mean?",
                "The simple renaming of a type does not generate a new type, but only a type alias for the same one."
            ],
            "flags": 0,
            "guid": "i?G/e*>#Z/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <i>weak</i> equivalence by name, which types are equivalent and which are distinct? <pre> \ntype T1 = 1..10;\ntype T2 = 1..10;\ntype T3 = int; \ntype T4 = int;\n</pre>",
                "T1 and T2 are distinct but T3 and T4 are equivalent. This is because T3 and T4 are seen as aliases for int."
            ],
            "flags": 0,
            "guid": "nuYF1ur~PS",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using <i>non-weak</i> equivalence by name, which types are equivalent and which are distinct?  <pre> \ntype T1 = 1..10;\ntype T2 = 1..10;\ntype T3 = int; \ntype T4 = int;\n</pre>",
                "They are all distinct."
            ],
            "flags": 0,
            "guid": "e53J5UCD7U",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean if a language uses opaque type definitions?",
                "Each new definition introduces a new type which is different from every preceding one."
            ],
            "flags": 0,
            "guid": "f`#ruW.rcS",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In a language with transparent declarations, when are two types equivalent?",
                "if they have the same structure, that is if, substituting names for the relevant definitions, identical types are obtained."
            ],
            "flags": 0,
            "guid": "C*1=:+)/P]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using structual equivalence, which types are equivalent here? <pre>\ntype T1 = int; \ntype T2 = char; \ntype T3 = struct {\n                           T1 a; \n                           T2 b;\n                    }\ntype T4 = struct {\n                           int a; \n                           char b; \n                     }\n                   </pre>",
                "T3 and T4 are structurally equivalent."
            ],
            "flags": 0,
            "guid": "N2C*rl&v=8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of compatibility?",
                "We say that type T is compatible with type S, if a value of type T is permitted in any context in which a value of type S would be admissible."
            ],
            "flags": 0,
            "guid": "x@Wj37W81.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In a language which admits structural equivalence, are two types that are structurally equivalent compatible?",
                "Yes, but not equal."
            ],
            "flags": 0,
            "guid": "n~wzB4z]g;",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is implicit conversion (also called coercion or forced conversion)?",
                "This is the case in which the abstract machine inserts a conversion when there is no such indication in the high-level language."
            ],
            "flags": 0,
            "guid": "v1|@H@5Nxa",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is explicit conversion (or cast)?",
                "This is when the conversion is indicated in the text of the program."
            ],
            "flags": 0,
            "guid": "s#T^bS$i9l",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the definition of type coercions?",
                "In the precense of compatibility between the types T and S, the language allows a value of tyep T to occur where a value of type S is expected. When this happens, the compiler and/or abstract machines inserts a type conversion between T and S."
            ],
            "flags": 0,
            "guid": "A8;fOas@fV",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does this describe? <br/> These are annotations in the language, which specify that a value of one type must be converted to that of another type.",
                "Explicit Conversions"
            ],
            "flags": 0,
            "guid": "FSIIxKRv:[",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What can universal polymorphism be divided into?",
                "Parametric polymorphism and subtyping or inclusion polymorphism."
            ],
            "flags": 0,
            "guid": "lj5W:^f::)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If we have defined the name + to be two functions, one which accepts integers, and another which accepts floats, what type of polymorphism would that be?",
                "Overloading, or ad hoc polymorphism. It chooses which function depending on the context."
            ],
            "flags": 0,
            "guid": "DrG$z4UH3B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What type of polymorphism is <i>null</i>?",
                "Universal parametric polymorphism, it has an infinite number of different types."
            ],
            "flags": 0,
            "guid": "mO]UO(D+JG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What type of polymorphism is <pre>void sort(<T> A[])</pre>?",
                "Universal parametric polymorphism, it has an infinite number of different types."
            ],
            "flags": 0,
            "guid": "k+9uRkvD2$",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In what kind of polymorphism is explicit and implicit polymorphism present?",
                "Universal parametric polymorphism."
            ],
            "flags": 0,
            "guid": "H`dprV@4s:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Where is subtype polymorphism typically present?",
                "In object-oriented programming languages."
            ],
            "flags": 0,
            "guid": "cICuGK~D)V",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is responsiblie for verifying that a program respects the rules (in particular, the compatibility rules) imposed by the type system?",
                "A language‚Äôs type checker"
            ],
            "flags": 0,
            "guid": "er|}QGU9{T",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How does the type checker determine the type of complex expressions?",
                "<b>It performs a simple traversal of the program‚Äôs abstract syntax tree</b>. Starting at the leaves (which represent variables and constants whose types are known), it moves upwards through the tree towards the root, computing the type of the composite expressions on the basis of the information provided by the programmer and the information it obtains from the type system (for example, the type system could establish that + is an operator which, when applied to two expression of type int, permits an expression also of type int to be derived, while =, when applied to two arguments of scalar type, gives an expression of type bool)."
            ],
            "flags": 0,
            "guid": "wAzfNn,7K6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why are C, C++ and all the languages of their family unsafe? ",
                "Because they allow access to the value of a pointer, meaning that the type system is more or less just a methodological suggestion to the programmer, in the sense that they (C, C++) allow the programmer to bypass type checking."
            ],
            "flags": 0,
            "guid": "M33_LM`PFk",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a locally unsafe language?",
                "A language whose type system is well regulated and type checked, but which contain some, limited, constructs which, when used, allow insecure programs to be written."
            ],
            "flags": 0,
            "guid": "BGS)a18_L*",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the first language to introduce type inference?",
                "ML"
            ],
            "flags": 0,
            "guid": "AC|j}H>|9m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a language safe?",
                "When the execution of a typed program can never generate a hidden error induced by the violation of a type."
            ],
            "flags": 0,
            "guid": "c%/]ZSe9Rh",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What can an abstract machine do when using a tombstone?",
                "An abstract machine can detect every attempt at dereferencing a dangling reference. Every time an object is allocated in the heap (to be then accessed by a pointer), the abstract machine also allocates an extra word in memory. (This word is called a tombstone)"
            ],
            "flags": 0,
            "guid": "jl%b)4wJC!",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is a tombstone initalised?",
                "The abstract machine allocates an extra word when an object is allocated in the heap, called the tombstone. The tombstone is initalised with the address of the allocated opbject, and the pointer receives the address of the tombstone. "
            ],
            "flags": 0,
            "guid": "l?$+%2sbk@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using tombstones, what happens when a poitner is dereferenced?",
                "The abstract machine inserts a second level of indirection, so that it first accesses the tombstone and then uses what it finds there to access the object that is pointed to."
            ],
            "flags": 0,
            "guid": "u#Iox9U(Uw",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the cemetery in an abstract machine?",
                "A part of memory containing all of the tombstones"
            ],
            "flags": 0,
            "guid": "I7r9L!q{,i",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is a lock initialised (locks and keys for dangling references)?",
                "Every time an object is created on the heap, the object is associated with a lock which is a word of memory in which an arbitraty value is stored. "
            ],
            "flags": 0,
            "guid": "fL%c&fP#~&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using the locks and keys method for dangling references, what is a pointer composed of?",
                "A pair: the address proper and a key (a word of memory that will be initialised with the value of the lock corresponding to the object being pointed to)."
            ],
            "flags": 0,
            "guid": "Iq)xUiq=]J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In languages without explicit memory deallocation, what is necessary for the abstract machine to be equipped with?",
                "A mechanims which could automatically reclaim the memory allocated on the heap that I no longer used (garbage collection)."
            ],
            "flags": 0,
            "guid": "gt`&PJbqZ-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When was garbage collection first introduced?",
                "In Lisp around 1960"
            ],
            "flags": 0,
            "guid": "piJh+jG:3S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the two phases of the operation of a garbage collector?",
                "1. Distinguish those objects that are still alive from those no longer in use (garbage detection); <br/> 2. COllect those objects known no longer to be in use, so that the program can reuse thhem."
            ],
            "flags": 0,
            "guid": "yOC/FwntXU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is reference counting?",
                "Determining if an object is in use by seeing if there are any pointers to it."
            ],
            "flags": 0,
            "guid": "p&)whkQj?h",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How is reference counting implemented?",
                "When an object is created on the heap, an integer is allocated at the same time, this integer is the reference counter."
            ],
            "flags": 0,
            "guid": "OAVU*]C.J<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When will the mark and sweep method be invoked?",
                "When the free memory available in the heap is close to being exhausted."
            ],
            "flags": 0,
            "guid": "Q=j]|K>?|e",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How does the mark and sweep method function?",
                "It marks objects with either unused or in use, and then sweeps all of the objects that are unused."
            ],
            "flags": 0,
            "guid": "L@3cG+u`=w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How can we avoid the fragmentation caused by the mark and sweep technique?",
                "We can modify the sweep phase and convert it into a compaction phase, where live objects are moved so that they are contiguous and thereby leave a contiguous block of free memory."
            ],
            "flags": 0,
            "guid": "N&t1%G1jF%",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does a stop and copy collector do with the heap?",
                "Divides it into two equally-sized parts. During normal execution, only one of the two semi-spaces is in use. "
            ],
            "flags": 0,
            "guid": "vB`,A<(`6k",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when the memory in the semi-space (one of the two spaces of the heap) is used in the stop and copy collector?",
                "The garbage collector is invoked, starting with pointers in the stack, it begins visiting the chain of structures held in the current semi-space, copying the structures one by one into the other semi-space, compacting them at one end of the latter. At the end of this process, the role of the two semi-spaces is swapped, and execution returns to the user program. "
            ],
            "flags": 0,
            "guid": "H.<:M9{HmU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the four methods garbage collectors can be based on?",
                "Reference counters, mark and swapp, mark and compact and copy."
            ],
            "flags": 0,
            "guid": "c|!N8CnF-J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is representation independence?",
                "Two correct implementations of a single specification of an ADT are observationally indistinguishable by the clients of these types. i.e. it is possible to replace its implementation by an equivalent (e.g. more efficient) without it causing any new errors in clients."
            ],
            "flags": 0,
            "guid": "m:z,%iX!/m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How do you access a method <i>world</i> from an object, <i>hello</i>?",
                "<pre>hello.world(params)</pre>"
            ],
            "flags": 0,
            "guid": "D`,UjUF$W",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a class?",
                "A moedl for a set of objects."
            ],
            "flags": 0,
            "guid": "qET{qHaB%,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Where are objects most commonly allocated?",
                "In the heap"
            ],
            "flags": 0,
            "guid": "FpNT+MUv5z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the mechanism of a subclasses ability to modify the definition (the implementation) of a method present in its superclass?",
                "Method overriding"
            ],
            "flags": 0,
            "guid": "NlZ6_QxO0k",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the mechanism of a subclesses ability to redefine an instance variable (or field) defined in a superclass called? ",
                "Shadowing."
            ],
            "flags": 0,
            "guid": "JrON0HZ,/W",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an abstract class?",
                "Classes that cannot have instances, because the class lacks the implementation of some method. In such classes there is only the name and the type (that is, the signature) of one or more methods ‚Äì their implementation is omitted."
            ],
            "flags": 0,
            "guid": "sGw=BK@S*m",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of a constructor?",
                "Initialization of the object‚Äôs data."
            ],
            "flags": 0,
            "guid": "ySQ(2ZcW!<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When a language allows for the creation of multiple constructors, what are the two methods of choosing a constructor?",
                "Choosing the constructor along with the creation operation (<i>new</i> in java) or more specific mechanisms, such as what C++ does."
            ],
            "flags": 0,
            "guid": "P@1r^oifOY",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when a subcless doesn‚Äôt redefine the methods from its superclass?",
                "It inherits them (the methods)"
            ],
            "flags": 0,
            "guid": "ONm2)NATFR",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do many languages do if they want a subclass to be able to access something from it‚Äôs superclass that other clients should not be able to do?",
                "It depends, C++ adds a third view, <i>protected</i>, which allows the subclasses only to access. "
            ],
            "flags": 0,
            "guid": "y/Z_=^<0),",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do we call it, if a language allows a class to inherit only from a single immediate superclass?",
                "Single (or simple) inheritance."
            ],
            "flags": 0,
            "guid": "H4<{bct^[5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do we call if, if a language allows a class to inherit methods from more than one immediate superclass?",
                "Multiple inhertiance"
            ],
            "flags": 0,
            "guid": "rY}#TSBKhQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What allows for compatibility of subtypes and abstraction?",
                "Dynamic Method Lookup"
            ],
            "flags": 0,
            "guid": "vVyF4wJ%!P",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is dynamic lookup executed? When is overloading?",
                "Dynamic lookup is at runtime, overloading is at compile time."
            ],
            "flags": 0,
            "guid": "piN6Y2L}%:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the simplest and intuitive way implementation of class and inheritance?",
                "The one which represents the class hierarchy using a linked list. Each element represents a class and contains (pointers to) to implementation of methods that are either defined or redefined in that class. "
            ],
            "flags": 0,
            "guid": "eb0Av~{7Y6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a vtable (virtual function table)?",
                "A list that contains not just the methods that ar rexplicitly defined or redefined in the class, but also all the moethods inhertied from its superclasses."
            ],
            "flags": 0,
            "guid": "yFIKUs@X(.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When defining a subclass, B of the class A, how is the vtable for B defined?",
                "By copying the one for A, replacing all the methods redefined in B and adding the new methods that b defined at the bottom."
            ],
            "flags": 0,
            "guid": "EBl4JJ#L(9",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is downcasting?",
                "If a class‚Äô vtable also contains the name of the class itself, the implementation we have discussed allows downward casts in the class hierarchy."
            ],
            "flags": 0,
            "guid": "Q@T_rnP0UO",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How does the compiler keep track of the nesting level of procedure calls?",
                "By using the symbol table, a sort of dictionary where, more generally, the compiler stores all the names used in the program and all the information necessary to manage the objects denoted by the names (for example to determine the type) and to implement visibility rules)"
            ],
            "flags": 0,
            "guid": "vT.<sgP3`Z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A problem with the implementation of static scope using the static chain is that we may have to access many memory locations to find a variable, which technique allows the reduction of the number of accesses to a constant (2)?",
                "Display"
            ],
            "flags": 0,
            "guid": "n@tV0qd%;9",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using variable-sized blocks, what happens if the chosen block is much larger than it is needed?",
                "It is divided into two and the unused part is added to thre free list"
            ],
            "flags": 0,
            "guid": "Hz/QXg^a[*",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is display not used much in modern implementations?",
                "It is more expensive to maintain than the static chain in the call sequence? "
            ],
            "flags": 0,
            "guid": "c{?k:*Mhq",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the A-list variant for dynamic scope?",
                "A list where the associations are stored in a special structure, used like a stack. This is very easy to implement."
            ],
            "flags": 0,
            "guid": "i1sF5^!5E]",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the access time of A-list?",
                "Linear, based on the length of the list"
            ],
            "flags": 0,
            "guid": "w6{da$NvUC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the access time of Central Referncing Table (CRT)?",
                "Constant"
            ],
            "flags": 0,
            "guid": "g>XWAbc<}_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between call by name and call by need?",
                "Call by need is a variant of call by name (if the function argument is evaluated, that value is stored for subsequent use)"
            ],
            "flags": 0,
            "guid": "l4AHTmpG:e",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What parameter passing method does haskell use?",
                "Call by need."
            ],
            "flags": 0,
            "guid": "l9,Q@QV^Xo",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is used for implementation of deep binding with dynamic scope?",
                "Closures"
            ],
            "flags": 0,
            "guid": "D$DIjr&BSM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is used for implementation of shallow binding with dynamic scope?",
                "It does not require further implementation"
            ],
            "flags": 0,
            "guid": "l>y7]c,h}@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is used for implementation of deep binding with static scope?",
                "It is implemented with closures"
            ],
            "flags": 0,
            "guid": "A2$;`{D{``",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is there any difference between shallow and deep binding using static scope?",
                "At first glance it might seem not, but that is not the case. With more than one block declaring the non-local name can be available; e.g. when recursion is present. "
            ],
            "flags": 0,
            "guid": "I{UwjH0a=3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In a simple implementation of exceptions, what happens if the first handler on the stack is not the right one, when an exception is raised?",
                "The first handler on the stadck is removed, and the exception is raised again and repeated."
            ],
            "flags": 0,
            "guid": "C4oSUr*(l5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If a user can freely allocate memory, but not deallocate memory, what do we use to ensure memory stability?",
                "Garbae collection"
            ],
            "flags": 0,
            "guid": "b4@x7gh2?>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is cherney‚Äôs algorithm?",
                "A stop and copy method."
            ],
            "flags": 0,
            "guid": "Q&n87+pG!b",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the basic idea of Abstract Data Types?",
                "To seperate the interface from the implementation."
            ],
            "flags": 0,
            "guid": "Q`vBRNQwjw",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Enapsulation is the mechanism for seperating what two views?",
                "The view of the dsigner, a concept has a ‚Äúdetailed‚Äù view, and the view of the customer, where the concept has an ‚Äúabstract‚Äù view."
            ],
            "flags": 0,
            "guid": "F.O,hY<1mC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between subtyping and inheritance?",
                "Subtyping refers to the compatibility of interfaces, while iheritance refers to the reuse of implementations."
            ],
            "flags": 0,
            "guid": "Q;>;zqEz;7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What methods are not virtual in java?",
                "Private and final methods"
            ],
            "flags": 0,
            "guid": "Qq<8-s&/{1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is this describing? ‚Äú______ cannot be instantiated, only subclassed‚Äù",
                "Abstract classes"
            ],
            "flags": 0,
            "guid": "CJAVeM0`xV",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is dynamic lookup?",
                "The code you run depends no the method, arguments and object."
            ],
            "flags": 0,
            "guid": "mlP~OyG.d~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is late binding? ",
                "The actual implementation of a method or function is not determined until the program is run."
            ],
            "flags": 0,
            "guid": "eT+vv6M${G",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>There are two types of iteration: {{c1::bounded}} and {{c1::unbounded}}. {{c1::Bounded}} is for numerically controlled cycles (for, do), and {{c1::unbounded}} is for logically controlled cycles (while, repeat).</p>",
                "."
            ],
            "flags": 0,
            "guid": "o,6.sB47D4",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "<p>Commands are more in {{c1::imperative}} languages, while expressions are more in {{c1::functional}} languages</p>",
                "."
            ],
            "flags": 0,
            "guid": "x=wso>6kGl",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "All common programming languages using static scope, also use {{c1::deep}} binding",
                "."
            ],
            "flags": 0,
            "guid": "ptGU3Nt]km",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "An object is a box that contains: <br/>{{c1::Hidden Data}}: variables, values; even functions.<br/>{{c2::Public operations}}: methods",
                "."
            ],
            "flags": 0,
            "guid": "NdCEUm6#mJ",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter09",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "It is possible to discern types of operation and an ‚Äúexecution method‚Äù common to all interpreters. The type of operation executed by the interpreter and assocated data structures, fall into the following categories: <br/> 1. {{c1::Operations for processing primitive data}} <br/> 2. {{c2::Operations and data structures for controlling the sequence of execution of operations}} <br/> 3. {{c3::Operations and data structures for controlling data transfers}} <br/> 4. {{c4::Operations and data structures for memory management}}.",
                "."
            ],
            "flags": 0,
            "guid": "Gr7bP9`A=]",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The storage component of a physical computer is composed of various levels of memory. Secondary memory implemented using {{c1::optical or magnetic components}}; primary memory, organised as a linear sequence of {{c2::cells, or words}}, of fixed size (usually a multiple of 8 bits); {{c3::cache}} and the {{c4::<i>registers</i>}} which are internal to the CPU",
                "."
            ],
            "flags": 0,
            "guid": "k<,H>VgOw0",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter01",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A context-free grammar is a quadruple (NT, T, R, S) where: <br/> 1. NT is {{c1::a finite set of symbols (non-terminal symbols, or variables, or syntactic categories).}} <br/> 2. T is {{c2::a finite set of symbols  (terminal symbols)}} <br/> 3. R is {{c3::a finite set of productions (or rules), each of which is composed of an expression of the form \\(V \\to \\omega \\) where \\(V\\) (the head of the production) is a single non-terminal symbol and \\(\\omega \\) (the body) is a string composed of zero or more terminal or non-terminal symbols (that is \\(\\omega \\) is a string over \\(T \\cup NT\\)) }} <br/> 4. S is {{c4::an element of NT (the initial symbol) }}",
                "."
            ],
            "flags": 0,
            "guid": "H];wjpm-*P",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter02",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When a new block is entered, the following modifications are made to the environment: <br/> 1. {{c1::Associations between locally declared names and the corresponding denotable objects are created}} <br/> 2. {{c2::Associations with names declared external to and redefined inside the block are deactivated}}",
                "."
            ],
            "flags": 0,
            "guid": "n[.!/9fXOF",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When a block is exited, the environment is modified as follows: <br/> 1. {{c1::The associations for names declared locally to the block and the objects they denote are destroyed.}} <br/> 2. {{c2::The associations are reactivated between names that existed external to the block and which were redefined inside it.}}",
                "."
            ],
            "flags": 0,
            "guid": "x`^jXQ^_aA",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter04",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The fields for an activation record for procedures are: <br/> 1. {{c1::The same as for in-line block: intermediate results, local variables, dynamic chain pointer}} <br/> 2. {{c2::Static Chain Pointer}} This stores the information needed to implement the static scope rules <br/> 3. {{c3::Return address}} Ttthis contains the address of the first instruction to execute after the call to the current procedure/function has terminated execution. <br/> 4. {{c4::Returned result}} This is present only in functions. Contains tthe address of the memory location where the subprogram stores the value to be returned by the function when it terminates. This memory location is inside the caller‚Äôs activation record. <br/> 5. {{c5::Parameters}} These are the values of actual parameters used to call the procedure or function are stored here. <br/>",
                "."
            ],
            "flags": 0,
            "guid": "plKgR02b^K",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When using fixed-length blocks in memory management, the heap is divided into a certain number of elements, or blocks, of fairly {{c1::small}} fixed length, linked intto a list structure called {{c2::the <i>free list</i>}}.",
                "."
            ],
            "flags": 0,
            "guid": "HhX+N.H!%9",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter05",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Assignment is the basic command that allows the modification of the values associated with {{c1::modifiable variables}}. It also modifies {{c2::the state}} in imperative languages.",
                "."
            ],
            "flags": 0,
            "guid": "Jx/fSg_(;%",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "There are four types of commands: <br/> 1. {{c1::<b>Assignment</b>}} This is the basic command in imperative languages (and in ‚Äúimpure‚Äù declarative languages); it expresses the elementary computation step. <br/> 2. {{c2::<b>Commands for explicit sequence control</b>}} These are the sequential command and <i>goto</i>. Let us consider, in addition, the composite command, which allows us to consider a group fo commands as a single one, as being in this category. <br/> 3. {{c3::<b>Conditional (or selection) commands</b>}} These are the commands which allow the specification of alternative paths that the competition can take. They depend on the satisfaction of specific conditions. <br/> 4. {{c4::<b>Iterative commands</b>}} These allow the repetition of a given command for a predefined number of times, or until the satisfaction of specific conditions",
                "."
            ],
            "flags": 0,
            "guid": "md%D&z#P!|",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter06",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The copy rule requires that the actual parameter must be evaluated {{c1::every time}} that the formal parameter is encountered during execution.",
                "."
            ],
            "flags": 0,
            "guid": "Do&d;kQbKy",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The handling of an exception in general requires two different constructs: <br/> A mechanism that defines a capsule around a portion of code (the {{c1::<i>protected block</i>}}), with the aim of intercepting the exceptions that are to be handled inside the capsule itself. <br/> The definition of a handler for the exception, statically linked to the protected block. Control is transferred to {{c2::the handler}} then the capsule intercepts the exception.",
                "."
            ],
            "flags": 0,
            "guid": "F!wNbY+BaO",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter07",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Data types are present in programming languages for at least three different reasons: <br/> 1. At the {{c1::design level}}, as support for the conceptual organisation. <br/> 2. At the {{c2::programlevel}}, as support for correctness <br/> 3. At the {{c3::translation level}}, as support for the implementation.",
                "."
            ],
            "flags": 0,
            "guid": "E^#[O=g)gd",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A type system consists of the following: <br/> 1. The set of {{c1::predefined types}} of the language. <br/> 2. The mechanisms which permit {{c2::the definition of new types.}} <br/> 3. The mechanisms for the {{c3::control of types}} among which we distinguish the following: <ul><li>{{c4::Equivalence rules}} which specify when two formally different types correspond to the same type</li><li>{{c5::Compatibility rules}} specifying when a value of a one type can be used in a context in which a different type would be required</li><li>{{c6::Rules and techniques}} for type inference which specify how the language assigns a type to a complex expresion based on information about its components.</ul> <br/> 4. The specification as to whether (or which) constraints are {{c7::statically or dynamically}} checked.",
                "."
            ],
            "flags": 0,
            "guid": "$5bNk~/f$",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The most important and common composite types are: <br> {{c1::Record (or structure}}, a collection of values in general of different types. <br/> {{c2::Array (or vector)}}, a collection of values of the same type. <br/> {{c3::Set}}, subsets of a base type, generally ordinal types <br/> {{c4::Pointer}} l-values, which permit access to data of another type. <br/> {{c5::Recursive types}} types defined by recursion, using constants and constructors; particular cases of {{c5::recursive types}} are lists, tress etc. ",
                "."
            ],
            "flags": 0,
            "guid": "Lb~cjra|$[",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Structural equivalence of types is the (least) equivalence realtion satisfying the following properties: <br/> <ul> \n<li>The name of a type is equivalent to {{c1::itself}}</li>\n<li> If a type T is introduced with the definition <i>type T = expression</i>, <i>T</i> is {{c2::equivalent}} to {{c3::<i>expression</i>}}</li>\n<li>If two types are constructed by applying the same type constructor to equivalent types, then the two types are {{c4::equivalent}}</li>\n</ul>",
                "."
            ],
            "flags": 0,
            "guid": "fb`De<G6m(",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter08",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When a language allows multiple inheritance, and both superclasses have methods of the same name, there are three different ways in which we can find out which we want to use (none of which is totally satisfactory): <br/> 1. {{c1::Forbid name clashes syntactically}} <br/> 2. Require that any conflict should be resolved by the programmer‚Äôs approriately qualifying every refernce to a name that is in conflict. For example, the body of h in class C, should be written as {{c2::B::f() or as A::f()}}, which is the solution adopted by C++ <br/> 3. Decide upon a convention for solving the conflict, for example favouring the first-class named in the {{c3::extending}} clause.",
                "."
            ],
            "flags": 0,
            "guid": "IRe6oD(7w*",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::PLChapter10",
                "CS::programming-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can programs solve any solvable problem described in logical notation?",
                "Yes, in principle, programs could solve any solvable problem described in logical notation."
            ],
            "flags": 0,
            "guid": "K.KJ^T?uc<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a rational agent in AI?",
                "A rational agent is one that acts so as to achieve the best outcome or, when there is uncertainty, the best expected outcome."
            ],
            "flags": 0,
            "guid": "H5E%)p$T7_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is limited rationality?",
                "Limited rationality is the ability to act appropriately when there is not enough time to do all the computations one might like."
            ],
            "flags": 0,
            "guid": "HM+I4yWSyN",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the value alignment problem?",
                "The value alignment problem refers to the difficulty of aligning the values or objectives put into an AI system with those of humans."
            ],
            "flags": 0,
            "guid": "JyvP1G,1>v",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who first formulated a precise set of laws governing the rational part of the mind?",
                "Aristotle"
            ],
            "flags": 0,
            "guid": "z~wq]y.~ta",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who is known for discussing the distinction between mind and matter?",
                "Ren√© Descartes"
            ],
            "flags": 0,
            "guid": "Ib|(#QtCSy",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is dualism?",
                "A philosophy that says there is a part of the human mind (or soul or spirit) that is outside of nature, exempt from physical laws."
            ],
            "flags": 0,
            "guid": "o.w?2kJi8t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is materialism?",
                "A philosophy that says that the brain‚Äôs oepration according the the laws of physics consitutes the mind. "
            ],
            "flags": 0,
            "guid": "B7j=m+5s)t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who proposed the principle of induction?",
                "David Hume in A Treatise of Human Nature (1739)"
            ],
            "flags": 0,
            "guid": "nVDEEaJMOr",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who developed the doctrine of logical positivism?",
                "The famous Vienna Circle, a group of philosophers and mathematicians meeting in Vienna in the 1920s and 30s, developed the doctrine of logical positivism."
            ],
            "flags": 0,
            "guid": "f-*:1z6X)8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How does logical positivism combine rationalism and empiricism?",
                "Logical positivism holds that all knowledge can be characterized by logical theories connected, ultimately, to observation sentences that correspond to sensory inputs; thus, it combines rationalism and empiricism."
            ],
            "flags": 0,
            "guid": "N~BQjS?aT_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an agent?",
                "Anything that can perceive its environment through sensors and act upon that environment through actuators."
            ],
            "flags": 0,
            "guid": "c~z]Mc:LO",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a percept?",
                "A percept refers to the content an agent‚Äôs sensors are perceiving."
            ],
            "flags": 0,
            "guid": "tf?1?NMR-R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an agent function?",
                "An agent function is a mathematical function that maps any given percept sequence to an action."
            ],
            "flags": 0,
            "guid": "C]o=tn{f^@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a percept sequence?",
                "An agent‚Äôs percept sequence is the complete history of everything the agent has ever perceived. "
            ],
            "flags": 0,
            "guid": "w%D!ciNh6^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a sensor and an actuator?",
                "A sensor is a device that perceives or captures information from the environment, while an actuator is a device that takes action in the environment."
            ],
            "flags": 0,
            "guid": "q(??%:)&!J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can an agent‚Äôs choice of action depend on anything it hasn‚Äôt perceived?",
                "No, it can only depend on it‚Äôs built-in knowledge and the entire percept sequence observed to date."
            ],
            "flags": 0,
            "guid": "l4KHc{_tg0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the couling between agents and environments?",
                "The coupling between agents and environments consists of sensors that perceive the environment and actuators that act upon that environment."
            ],
            "flags": 0,
            "guid": "*{:jw}jGG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do agents use to interact with environments?",
                "Sensors and actuators."
            ],
            "flags": 0,
            "guid": "E!nCKU.j)S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between the agent function and the agent program?",
                "The function is an abstract mathematical description, while the program is a concrete implementation running within some physical system."
            ],
            "flags": 0,
            "guid": "NJy7}0c|yT",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean to do the right thing according to consequentialism in the context of AI?",
                "Consequentialism evaluates an agent‚Äôs behavior by its consequences. If the sequence of actions an agent generates causes the environment to go through a sequence of desirable states, then the agent has performed well."
            ],
            "flags": 0,
            "guid": "w0Kr^#|Gr(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between rationality and omniscience?",
                "The difference between rationality and omniscience is that a rational agent selects actions based on the evidence provided by its percept sequence and built-in knowledge to maximize its performance measure, while an omniscient agent knows the actual outcome of its actions and can act accordingly. However, omniscience is impossible in reality."
            ],
            "flags": 0,
            "guid": "L4U]Qd.U!t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is rationality?",
                "The concept of maximizing expected performance rather than achieving perfection."
            ],
            "flags": 0,
            "guid": "NvEe`/(kQv",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::AI::Chapter2::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the keyword used after <i>let</i> to indicate that a variable can be mutated?",
                "mut"
            ],
            "flags": 0,
            "guid": "o,kW.mlD6j",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is immutability in Rust?",
                "Once a value is bound to a name, you can‚Äôt change that value."
            ],
            "flags": 0,
            "guid": "dq3F.m[A-P",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is a variable in rust by default mutable or immutable?",
                "Immutable"
            ],
            "flags": 0,
            "guid": "zuk*}6;lW_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why does Rust encourage immutability?",
                "To take advantage of the safety and easy concurrency Rust offers."
            ],
            "flags": 0,
            "guid": "OAmuAc?}kr",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How can you make a variable mutable in Rust?",
                "By adding the <i>mut</i> keyword before a variable declaration."
            ],
            "flags": 0,
            "guid": "ylQdNB+HH2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens if you try to reassign a value to an immutable variable in Rust?",
                "It will result in an error, and the code won‚Äôt compile."
            ],
            "flags": 0,
            "guid": "eFZ!K+/`IF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are constants in rust?",
                "Values that are bound to a name and are immutable by deafult, and are declared using the <i>const<7i> keyword instead of the let keyword."
            ],
            "flags": 0,
            "guid": "so[5&tkE(%",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Rust‚Äôs naming convention for constants?",
                "Using all uppercase with underscores between words, UPPER_SNAKE_CASE."
            ],
            "flags": 0,
            "guid": "euN7dD#FF#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can constants be declared in any scope in Rust?",
                "Yes, including the global scope (which normal variables cannot)."
            ],
            "flags": 0,
            "guid": "nNT1kt~DYg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between using <i>let</i> and <i>const</i> in Rust?",
                "<i>const</i> can be used in the global scope. <i>let</i> cannot."
            ],
            "flags": 0,
            "guid": "t@enkoi^Gc",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How long are constants valid for in a Rust program?",
                "The entire time a program runs, or the lifetime of the scope."
            ],
            "flags": 0,
            "guid": "yRu0<oRGj$",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is shadowing in Rust?",
                "When a new variable with the same name as a previous variable is declared, causing the second variable to overshadow the first within the scope of the program."
            ],
            "flags": 0,
            "guid": "wF{:oxS,}r",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why would you want to shadow a variable in Rust?",
                "To use the same name for a new variable (when not using the previous anymore), or to change the type of a variable."
            ],
            "flags": 0,
            "guid": "A[>tYq]Q!4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between compoound and scalar types?",
                "Scalar types hold a single values, while compound types can group multiple values into one type."
            ],
            "flags": 0,
            "guid": "rnV9s],_Om",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the two data type subsets in Rust?",
                "Scalar and Compound"
            ],
            "flags": 0,
            "guid": "u6R/1aiVaj",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the four primary scalar types in Rust?",
                "Integers, floating-point numbers, Booleans and characters."
            ],
            "flags": 0,
            "guid": "M(Y[gCVZq^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is Rust statically typed or dynamically typed?",
                "Statically, meaning it must know the types of all variables at compile time."
            ],
            "flags": 0,
            "guid": "Hhem9CbccA",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How does the compiler in Rust determine the data type of variables?",
                "The compiler can usually infer the type based on the value and how we use it."
            ],
            "flags": 0,
            "guid": "#@d20Yl{S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when there are many possible types for a value?",
                "We must add a type annotation for Rust to know which type we want to use."
            ],
            "flags": 0,
            "guid": "s{(Dtkp~a0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a type annotation in Rust?",
                "A way of explicitly specifying the data type of a rust value or variable."
            ],
            "flags": 0,
            "guid": "DJ2K<@_pu9",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the parse() function used for in Rust? ",
                "Converting data of one type to another."
            ],
            "flags": 0,
            "guid": "O;Ku=cFc!c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the u32 type in Rust?",
                "An unsigned integer that takes up 32 bits of space."
            ],
            "flags": 0,
            "guid": "NMKU}`&t!u",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between signed and unsigned variants of integer types in Rust?",
                "Whether or not it can be both negative and positive (signed) or can only ever be positive (unsigned)"
            ],
            "flags": 0,
            "guid": "P[ki`a3dFg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the usize type in Rust?",
                "The size of a pointer. "
            ],
            "flags": 0,
            "guid": "pK-V=UR[N`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How many bits does the usize type take up in Rust?",
                "32 or 64 bits depending on the type of computer architecture."
            ],
            "flags": 0,
            "guid": "vAAxoHD#jJ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is integer overflow?",
                "When a variable of a certain type is assigned to a value outside the maximum and minimum values the type can hold."
            ],
            "flags": 0,
            "guid": "kG{PB?~V3h",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the outcome of integer overflow when compiling in debug mode in Rust?",
                "Rust includes checks for integer overflow that cause the program to panic at runtime."
            ],
            "flags": 0,
            "guid": "u_;Uw;0p!M",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the outcome of integer overflow when compiling in release mode in Rust?",
                "Rust does not include checks for integer overflow, instead, values greater than maximum wrap to the minimum value the type can hold."
            ],
            "flags": 0,
            "guid": "O2-2_{,r[a",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the IEEE-754 standard?",
                "The standard for representing floating-point numbers."
            ],
            "flags": 0,
            "guid": "x9s>))6Y[d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between f32 and f64 types?",
                "f32 is a single-precision float, while f64 is a double precision float."
            ],
            "flags": 0,
            "guid": "j9*uA;q~X>",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does integer division round up ro down to the nearest integer in Rust?",
                "It rounds down to the nearest integer."
            ],
            "flags": 0,
            "guid": "LruM%$%vKs",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the size of a Boolean type in rust?",
                "The Boolean type is one byte in size."
            ],
            "flags": 0,
            "guid": "na7~u=9cm(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does Rust‚Äôs char type represent?",
                "Unicode Scalar Value, meaning it can represent a lot more than just ASCII."
            ],
            "flags": 0,
            "guid": "E;Hr>7BxM3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the size of Rust‚Äôs char type?",
                "4 bytes."
            ],
            "flags": 0,
            "guid": "n0oo=woLjM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the two primitive compound types in Rust?",
                "Tuples and arrays."
            ],
            "flags": 0,
            "guid": "c]vW+fUOK&",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can the length of a tuple in Rust change after it has been declared?",
                "No"
            ],
            "flags": 0,
            "guid": "jk|4Ov+TcW",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How can individual values be obtained from a tuple in Rust?",
                "By using pattern matching. E.g. let (a, _, _) = tuple"
            ],
            "flags": 0,
            "guid": "nCA]Ym7&qG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is destructuring in Rust?",
                "Breaking a single tuple into separate variables."
            ],
            "flags": 0,
            "guid": "qr(LX;-Af,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How can we access a tuple element directly in Rust+ ",
                "By using a period (.) followed by the indedx of the value we want to access."
            ],
            "flags": 0,
            "guid": "nC&.[Ro13f",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the unit value in Rust?",
                "The unit value is (), which represents an empty value of an empty return type."
            ],
            "flags": 0,
            "guid": "pN.hi>c`=c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In Rust, how do you declare an array with 5 elements that are initialized with the value 3?",
                "<pre>let array_name = [3; 5]</pre>"
            ],
            "flags": 0,
            "guid": "xWGkEP0P)5",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If the index specified is greater than or equal to the array length, what will Rust do?",
                "Result in a runtime error, and the program will exit."
            ],
            "flags": 0,
            "guid": "s/DN|vF-,t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::rust",
                "CS::rust-book::chapter-3"
            ]
        }
    ]
}